<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>少年</title>
  <subtitle>正直，纯洁，善良</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-30T14:57:26.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>少年</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基础javascript算法</title>
    <link href="http://yoursite.com/2016/11/30/%E5%9F%BA%E7%A1%80javascript%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2016/11/30/基础javascript算法/</id>
    <published>2016-11-30T14:55:05.000Z</published>
    <updated>2016-11-30T14:57:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>终于把FCC的基础javascript算法做完了，来总结一下。</p>
<a id="more"></a>
<p>###翻转字符串</p>
<blockquote>
<p>先把字符串转化成数组，再借助数组的reverse方法翻转数组顺序，最后把数组转化成字符串。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function reverseString(str) &#123;</div><div class="line">  var arr = str.split(&quot;&quot;);</div><div class="line">  var arrs = arr.reverse(); </div><div class="line">  var rts = arr.join(&quot;&quot;);</div><div class="line">  return rts;</div><div class="line">&#125;</div><div class="line"></div><div class="line">reverseString(&quot;hello&quot;);</div></pre></td></tr></table></figure>
<p>主要用到了</p>
<ol>
<li><code>str.split()</code>分割字符串并生成数组。</li>
<li><code>arr.reverse()</code>反转数组，把第一个转到最后一个，最后一个转到第一个。</li>
<li><code>arr.join()</code>在数组中每两个元素中加入一个字符串组成新的字符串<code>arr.join(&quot;&quot;)</code>就是什么都不加入。</li>
</ol>
<p>###计算一个整数的阶乘</p>
<p><a href="http://www.jianshu.com/p/74374e8bb6b9" target="_blank" rel="external">这个之前写过了，在这里</a></p>
<p>###检测给定的字符是否是回文</p>
<p><a href="http://www.jianshu.com/p/2f0fb49adcf0" target="_blank" rel="external">这个之前也写过了，在这里</a></p>
<p>###找到提供的句子中最长的单词，并计算它的长度</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function change(a,b) &#123;</div><div class="line">  if(a.length &gt; b.length) return -1;</div><div class="line">  return 1;</div><div class="line">&#125;</div><div class="line">function findLongestWord(str) &#123;</div><div class="line">  var arr = str.split(&quot; &quot;);</div><div class="line">  var newArr = arr.sort(change);</div><div class="line">  //return newArr.length;</div><div class="line">  return newArr[0].length;</div><div class="line">&#125;</div><div class="line"></div><div class="line">findLongestWord(&quot;The quick brown fox jumped over the lazy dog&quot;);</div></pre></td></tr></table></figure>
<p>主要用到了sort排序，<a href="http://www.jianshu.com/p/579379146bfa" target="_blank" rel="external">详细在这里</a></p>
<p>###确保字符串的每个单词首字母都大写，其余部分小写。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function titleCase(str) &#123;</div><div class="line">  var newStr = str.toLowerCase();</div><div class="line">  var arr = newStr.split(&quot; &quot;);</div><div class="line">  for (var i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">    var char = arr[i].charAt(0);</div><div class="line">    arr[i] = arr[i].replace(char,function rep(char) &#123;</div><div class="line">      return char.toUpperCase();</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  var xstr = arr.join(&quot; &quot;);</div><div class="line">    return xstr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">titleCase(&quot;sHoRt AnD sToUt&quot;);</div></pre></td></tr></table></figure>
<p>用到了<code>str.toLowerCase()</code>，<code>str.replace()</code>和<code>str.toUpperCase()</code></p>
<p>思路大概是：字符串换成小写，转换成数组。遍历数组找到每个字符串的首字母（用<code>str.charAt()</code>）。然后用<code>str.replace()</code>把首字母替换为大写。在把数组转换为字符串输出。</p>
<p><code>str.replace()</code>方法：<code>stringObject.replace(regexp/substr,replacement)</code>;regexp/substr为需要替换的对象，replacement为替换后的对象，可以为一个函数，比如文中用到的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr[i] = arr[i].replace(char,function rep(char) &#123;</div><div class="line">     return char.toUpperCase();</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<p>###返回数组中最大的数</p>
<blockquote>
<p>右边大数组中包含了4个小数组，分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新数组。<br>largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]])应该返回[5,27,39,1001]</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function change(a,b)&#123;</div><div class="line">  if (a&gt;b) return -1;</div><div class="line">  return 1;</div><div class="line">&#125;</div><div class="line">function largestOfFour(arr) &#123;</div><div class="line">  // You can do this!</div><div class="line">  var maxx = [];</div><div class="line">  var maxNum = [];</div><div class="line">  for(var i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">    maxx[i] =  arr[i].sort(change);</div><div class="line">    maxNum[i] = maxx[i][0];</div><div class="line">  &#125;</div><div class="line">  return maxNum;</div><div class="line">&#125;</div><div class="line"></div><div class="line">largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);</div></pre></td></tr></table></figure>
<p>依然用到sort排序。</p>
<p>思路：遍历数组，sort对数组排序，并传到新数组中对应的位置<code>maxx[i] =  arr[i].sort(change);</code>然后找到各个数组中最大的数传到另一个数组中<code>maxNum[i] = maxx[i][0];</code></p>
<p>###检查一个字符串(str)是否以指定的字符串(target)结尾</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function confirmEnding(str, target) &#123;</div><div class="line">  var targetL = target.length;</div><div class="line">  var newStr = str.substring(str.length-targetL,str.length); </div><div class="line">  if (newStr == target) return true;</div><div class="line">  return false;</div><div class="line">&#125;</div><div class="line"></div><div class="line">confirmEnding(&quot;He has to give me a new&quot;, &quot;name&quot;);</div></pre></td></tr></table></figure>
<p>思路：截取字符串最后几位，检查是否等于给定的target</p>
<p>###重要的事情说3遍！</p>
<blockquote>
<p>重复一个指定的字符串 num次，如果num是一个负数则返回一个空字符串。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function repeat(str, num) &#123;</div><div class="line">  // repeat after me</div><div class="line">  var newStr = str.split(&quot; &quot;);</div><div class="line">  if (num &lt; 0) return &quot;&quot;;</div><div class="line">  else &#123;</div><div class="line">    for (var i = 0; i &lt; num; i++) &#123;</div><div class="line">      newStr[i] = str;</div><div class="line">    &#125;</div><div class="line">    return newStr.join(&quot;&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">repeat(&quot;abc&quot;, 3);</div></pre></td></tr></table></figure>
<p>思路：这个其实不难，就是不好想出来，新建一个数组，然后在i&lt;num的时候开始循环，新数组的[i]对应给定的str，这样num是多少，就循环了多少遍，新数组中就有多少个元素。</p>
<p>###截断一个字符串！</p>
<blockquote>
<p>如果字符串的长度比指定的参数num长，则把多余的部分用…来表示。</p>
<p>切记，插入到字符串尾部的三个点号也会计入字符串的长度。</p>
<p>但是，如果指定的参数num小于或等于3，则添加的三个点号不会计入字符串的长度。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function truncate(str, num) &#123;</div><div class="line">  // Clear out that junk in your trunk</div><div class="line">  var strSub;</div><div class="line">  if (str.length &gt; num) &#123;</div><div class="line">    if(num &gt; 3) &#123;</div><div class="line">    strSub = str.substring(0,num-3);</div><div class="line">      return strSub+&quot;...&quot;;</div><div class="line">    &#125; else &#123;</div><div class="line">    strSub = str.substring(0,num);</div><div class="line">      return strSub+&quot;...&quot;;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return str;</div><div class="line">&#125;</div><div class="line"></div><div class="line">truncate(&quot;A-tisket a-tasket A green and yellow basket&quot;, 11);</div></pre></td></tr></table></figure>
<p>主要用到了<code>str.substring(start,end)</code>,从start处开始截取，到end处截止。<br>难点在与如果指定的参数num小于或等于3，则添加的三个点号不会计入字符串的长度。<br>这个要写if..else来判断</p>
<p>###把一个数组按照指定的数组大小分割成若干个数组块。</p>
<blockquote>
<p>chunk([1,2,3,4],2)=[[1,2],[3,4]];<br>chunk([1,2,3,4,5],2)=[[1,2],[3,4],[5]];</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function chunk(arr, size) &#123;</div><div class="line">  // Break it up.</div><div class="line">  var num1 = Math.floor(arr.length / size);</div><div class="line">  var num2 = arr.length % size;</div><div class="line">  var arr2 = [];</div><div class="line">  if (num2 === 0) &#123;</div><div class="line">  for (var i = 0; i &lt; num1; i++) &#123;</div><div class="line">    arr2[i] = arr.slice(i * size,size * (i + 1));</div><div class="line">    //return arr2;</div><div class="line">    &#125; </div><div class="line">  &#125;else  &#123;</div><div class="line">  for (var j = 0; j &lt;= num1; j++) &#123;</div><div class="line">    arr2[j] = arr.slice(j * size,size * (j + 1));</div><div class="line">    //return arr2;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return arr2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">chunk([0, 1, 2, 3, 4, 5], 4);</div></pre></td></tr></table></figure>
<p>用到<code>arr.slice()</code>来切割数组。</p>
<p>思路主要是：</p>
<ol>
<li>先计算出分成几大段并赋值给num1，再计算出分段后剩余的（用求余计算）并赋值给num2；新建一个数组arr2。</li>
<li><p>开始判断，如果余数为0，也就是正好分段完没有剩余字符。此时进行遍历并储存切割后的字符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (var i = 0; i &lt; num1; i++) &#123;</div><div class="line">    arr2[i] = arr.slice(i * size,size * (i + 1));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>如果余数不为0，进行另一种赋值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (var j = 0; j &lt;= num1; j++) &#123;</div><div class="line">    arr2[j] = arr.slice(j * size,size * (j + 1));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>难点还是在于遍历的同时完成切割后字符的储存，之前一直想直接返回数组，结果只会返回第一个值。后来想了一个方法：新建一个数组，遍历的同时进行新数组第i个赋值，完美。</p>
<p>###返回一个数组被截断n个元素后还剩余的元素，截断从索引0开始。</p>
<blockquote>
<p>slasher([1, 2, 3], 2)应该返回 [3].<br>slasher([“burgers”, “fries”, “shake”], 1)应该返回 [“fries”, “shake”].</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function slasher(arr, howMany) &#123;</div><div class="line">  // it doesn&apos;t always pay to be first</div><div class="line">  return arr.slice(howMany,arr.length);</div><div class="line">&#125;</div><div class="line"></div><div class="line">slasher([1, 2, 3], 2);</div></pre></td></tr></table></figure>
<p>这个如果想到了还挺简单的,用<code>arr.clice()</code>,输入两个参数，一个起始位置，一个结束位置，就可以输出了。</p>
<p>###如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。</p>
<blockquote>
<p>mutation([“Mary”, “Army”])应该返回 true.<br>mutation([“hello”, “neo”])应该返回 false.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function mutation(arr) &#123;</div><div class="line">  var rarr = [];</div><div class="line"> var str1 = arr[0].toLowerCase();</div><div class="line">  var str2 = arr[1].toLowerCase();</div><div class="line">  for (var i = 0; i &lt; str2.length; i++) &#123;</div><div class="line">    rarr[i] = str1.indexOf(str2[i]);</div><div class="line">  &#125;</div><div class="line">  var rstr = rarr.join(&quot;&quot;);</div><div class="line">  if (rstr.indexOf(&quot;-1&quot;) &gt;= 0) &#123;</div><div class="line">    return false;</div><div class="line">  &#125; return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">mutation([&quot;Mary&quot;, &quot;Army&quot;]);</div></pre></td></tr></table></figure>
<p>思路：用<code>str.indexOf()</code>找到第二个字符串各个字符在第一个字符串中的位置（找不到为-1）并储存为一个新数组；然后对储存位置的数组进行判断，找到数组中-1（也就是不被字符串1包含的字符）的位置，如果&gt;=0，就意味着位置数组中确实存在值为-1的元素，也就是第二个字符串中有不被第一个字符串包含的字符。返回false.反之如果值为-1的元素在位置数组中的位置为-1，就证明不存在，也就是字符串2中的字符全能在字符串1中找到，此时返回true。</p>
<p>###删除数组中的所有假值。</p>
<blockquote>
<p>在JavaScript中，假值有<code>false</code>、<code>null</code>、<code>0</code>、<code>&quot;&quot;</code>、<code>undefined</code>和<code>NaN</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function bouncer(arr) &#123;</div><div class="line">  // Don&apos;t show a false ID to this bouncer.</div><div class="line">  function change(arr) &#123;</div><div class="line">    return !(arr === null || arr === false || arr === undefined || arr === 0 || arr === &quot;&quot; || arr !== arr);</div><div class="line">  &#125;</div><div class="line">  return arr.filter(change);</div><div class="line">&#125;</div><div class="line"></div><div class="line">bouncer([false, null, 0, NaN, undefined, &quot;&quot;]);</div></pre></td></tr></table></figure>
<p><a href="http://www.jianshu.com/p/e2386d64d07b" target="_blank" rel="external">关于null,undefined,NaN的区别之前写过，点这里跳转</a></p>
<p>主要用到了<code>arr.filter(callback)</code>，用来返回满足callback函数的值。</p>
<p>###实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。</p>
<blockquote>
<p>destroyer([1, 2, 3, 1, 2, 3], 2, 3)应该返回 [1, 1].</p>
<p>destroyer([“tree”, “hamburger”, 53], “tree”, 53)应该返回 [“hamburger”].</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function destroyer(arr) &#123;</div><div class="line">  // Remove all the values</div><div class="line">  var arrDel = [];</div><div class="line">  for(var i =1; i&lt;arguments.length; i++) &#123;</div><div class="line">    arrDel.push(arguments[i]);</div><div class="line">  &#125;</div><div class="line">  return arr.filter(function(val) &#123;</div><div class="line">                    return arrDel.indexOf(val)&lt;0;</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">destroyer([1, 2, 3, 1, 2, 3], 2, 3);</div></pre></td></tr></table></figure>
<p>用到<code>arguments.object</code>:arguments 是一个类数组对象。代表传给一个function的参数列表。你可以传递任意数量的参数到该函数，然后该函数会将每个参数作为一个条目来创建一个列表。</p>
<p>比如destroyer(arr)这个函数，只有一个参数，那么如何处理destroyer([1, 2, 3, 1, 2, 3], 2, 3);呢？<br>没错，[1, 2, 3, 1, 2, 3], 2, 3全部都是arguments这个类数组。可以理解为arguments=[[1, 2, 3, 1, 2, 3], 2, 3]</p>
<p>但是arguments对象并不是一个真正的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array" target="_blank" rel="external">Array
</a>。它类似于数组，但没有数组所特有的属性和方法，除了 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/length" target="_blank" rel="external">length</a>。例如，它没有 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop" target="_blank" rel="external">pop</a> 方法。</p>
<p>思路：新建一个储存被删除值的数组arrDel，开始对arguments进行遍历，注意val i = 1;因为不需要对第一个（也就是arr）进行遍历。</p>
<p>然后把arguments各个元素push进arrDel.然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">return arr.filter(function(val) &#123;</div><div class="line">       return arrDel.indexOf(val)&lt;0;&#125;);</div></pre></td></tr></table></figure></p>
<p>###先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。</p>
<blockquote>
<p>where([1,2,3,4], 1.5)应该返回 1。因为1.5插入到组[1,2,3,4]后变成[1,1.5,2,3,4]，而1.5对应的索引值就是1。</p>
<p>同理，where([20,3,5], 19) 应该返回 2。因为数组会先排序为 [3,5,20]，19插入到数组[3,5,20]后变成[3,5,19,20]，而19对应的索引值就是2。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function where(arr, num) &#123;</div><div class="line">  // Find my place in this sorted array.</div><div class="line">  var newArr = arr.concat(num);</div><div class="line">  function change(a,b) &#123;</div><div class="line">    if (b - a &gt;0) return -1;</div><div class="line">    return 1;</div><div class="line">  &#125;</div><div class="line">  return newArr.sort(change).indexOf(num);</div><div class="line">&#125;</div><div class="line"></div><div class="line">where([2, 20, 10], 19);</div></pre></td></tr></table></figure>
<p>思路：用arr.concat拼接数组，然后利用sort排序，然后用indexOf返回索引值就可以了。</p>
<p>###写一个<a href="http://www.baike.com/wiki/ROT13&amp;prd=so_1_doc" target="_blank" rel="external">ROT13</a>函数，实现输入加密字符串，输出解密字符串。</p>
<blockquote>
<p>下面我们来介绍风靡全球的凯撒密码Caesar cipher<br>，又叫移位密码。</p>
<p>移位密码也就是密码中的字母会按照指定的数量来做移位。</p>
<p>一个常见的案例就是<a href="http://www.baike.com/wiki/ROT13&amp;prd=so_1_doc" target="_blank" rel="external">ROT13</a>密码，字母会移位13个位置。由’A’ ↔ ‘N’, ‘B’ ↔ ‘O’，以此类推。</p>
<p>写一个<a href="http://www.baike.com/wiki/ROT13&amp;prd=so_1_doc" target="_blank" rel="external">ROT13</a>函数，实现输入加密字符串，输出解密字符串。</p>
<p>所有的字母都是大写，不要转化任何非字母形式的字符(例如：空格，标点符号)，遇到这些特殊字符，跳过它们。</p>
<p>rot13(“SERR PBQR PNZC”)应该解码为 “FREE CODE CAMP”</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function rot13(str) &#123;</div><div class="line">  var newArr=[];</div><div class="line">  for(var i=0;i&lt;str.length;i++)&#123;</div><div class="line">    if(str.charCodeAt(i)&lt;65||str.charCodeAt(i)&gt;90)&#123;</div><div class="line">      newArr.push(str.charAt(i));</div><div class="line">     &#125;else if(str.charCodeAt(i)&gt;77)&#123;</div><div class="line">       newArr.push(String.fromCharCode(str.charCodeAt(i)-13));</div><div class="line">    &#125;else&#123;</div><div class="line">      newArr.push(String.fromCharCode(str.charCodeAt(i)+13));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return newArr.join(&quot;&quot;);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"></div><div class="line"></div><div class="line">// Change the inputs below to test</div><div class="line"> rot13(&quot;SERR PBQR PNZC&quot;);</div></pre></td></tr></table></figure>
<p>这个主要考察unicode编码。</p>
<p><code>charCodeAt()</code>方法返回0到65535之间的整数，代表索引处字符的UTF-16编码单元（在Unicode编码单元表示一个单一的UTF-16编码单元的情况下，UTF-16编码单元匹配Unicode编码单元。否则，比如Unicode 编码单元 &gt; 0x10000 的情况下，只能匹配Unicode代理对的第一个编码单元）。如果你希望得到整点编码值，使用codePointAt()</p>
<p>思路： </p>
<ol>
<li>26个字母的unicode码在65(A)与90(Z)之间,第13位M(77); </li>
<li>将str通过.charCodeAt()转为unicode编码并放入新数组; </li>
<li>其中非字母形式的字符直接放入.charAt(); </li>
<li>后13位字母减去13后放入； </li>
<li>前13位字母加上13后放入； </li>
<li>通过.fromCharCode()转化为字母，将数组转化为字符串；</li>
</ol>
<p>###基础javascript算法就到这了，很多算法虽然写出来了，但是应该不是最优解，但是现在我还想不出来更好的解法。先这样吧，如有错误，欢迎指正。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于把FCC的基础javascript算法做完了，来总结一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="FCC" scheme="http://yoursite.com/tags/FCC/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>js字符串转数字</title>
    <link href="http://yoursite.com/2016/11/24/js%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2016/11/24/js字符串转数字/</id>
    <published>2016-11-24T15:22:13.000Z</published>
    <updated>2016-11-24T15:24:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天写代码的时候遇到一个问题，获取了一个span元素的值，但是+1的时候却出现了25+1=251的情况。原来是获取的值为字符串，所以对字符串进行了拼接。</p>
<p>我又翻了翻js高程，仔细看了看关于字符串，数字，布尔值的互相转换问题，这里先介绍字符串转数字。<br><a id="more"></a><br>js里有三种方法可以完成字符串转数字，分别是</p>
<ul>
<li><code>Number()</code></li>
<li><code>parseInt()</code></li>
<li><code>parseFloat()</code></li>
</ul>
<p>那么它们有什么区别呢？</p>
<ol>
<li><p><code>Number()</code></p>
<ul>
<li>如果字符串只包含数字，则将其转换为十进制数值，即 <code>&quot;123&quot;</code> 会变成 <code>123</code>  </li>
<li>如果字符串包含十六进制格式，例如 <code>&quot;0xf&quot;</code> ，则将其转换为相同大小的十进制整数值</li>
<li>如果字符串为空，转换为 <code>0</code></li>
<li>如果是上述格式之外的字符，转换为 <code>NaN</code><br>例如<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var num1 = Number(&quot;Hello world!&quot;);      //NaN</div><div class="line">var num2 = Number(&quot;&quot;);                  //0</div><div class="line">var num3 = Number(&quot;000011&quot;);            //NaN</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>parseInt()</code><br>由于<code>Number()</code>处理字符串比较复杂且不够合理，所以处理整数常用 <code>parseInt()</code><br><code>parseInt()</code> 转换字符的时候，会识别字符是否符合数值模式，它会忽略字符串前面的空格，从第一个非空格字符开始解析，如果是非数字符号或正负号，则返回 <code>NaN</code> 。如果第一个非空字符是数字符号或正负号，那么会继续解析，直到解析完或遇到非数字符号，比如 <code>1234blue</code> 会被转换成 <code>1234</code>， 但是需要注意的是，小数点并不算是数字符号，所以 <code>22.5</code> 会被解析为 <code>22</code>。同时也能解析八进制或十六进制的数。<br>例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var num1 = parseInt(&quot;1234blue&quot;);      //1234</div><div class="line">var num2 = parseInt(&quot;&quot;);              //NaN</div><div class="line">var num3 = parseInt(&quot;22.5&quot;);          //22</div><div class="line">var num4 = parseInt(&quot;070&quot;);           //56(八进制数)</div><div class="line">var num5 = parseInt(&quot;0xf&quot;);           //15(十六进制数)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>另外一点，由于 <code>parseInt()</code> 在解析八进制数字的时候，ECMAScript3和5存在分歧，所以 <code>parseInt()</code> 可以制定两个参数，即转换的进制，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var num1 = parseInt(&quot;AF&quot;, 16);      //175</div><div class="line">var num2 = parseInt(&quot;AF&quot;);          //NaN</div><div class="line">var num3 = parseInt(&quot;10&quot;, 2);       //2(按二进制解析)</div><div class="line">var num4 = parseInt(&quot;10&quot;, 8);       //8(按八进制解析)</div><div class="line">var num5 = parseInt(&quot;10&quot;, 10);      //10(按十进制解析)</div><div class="line">var num6 = parseInt(&quot;10&quot;, 16);      //16(按十六进制解析)</div></pre></td></tr></table></figure></p>
<ol>
<li><code>parseFloat()</code><br>与 <code>parseInt()</code> 类似，也是从第一个字符开始解析，但是小数点是有效的，因为 <code>parseFloat()</code> 解析的不是数字符号，而是浮点数字字符，但第二个小数点就无效了。比如 <code>&quot;22.34.5&quot;</code> 会背转换为 <code>22.34</code><br>需要注意的是 <code>parseFloat()</code> 只能解析十进制的数字。<br>例如<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var num1 = parseFloat(&quot;1234blue&quot;);      //1234</div><div class="line">var num2 = parseFloat(&quot;22.5&quot;);          //22.5</div><div class="line">var num3 = parseFloat(&quot;22.34.5&quot;);       //22.34</div><div class="line">var num4 = parseFloat(&quot;0xA&quot;);           //0</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天写代码的时候遇到一个问题，获取了一个span元素的值，但是+1的时候却出现了25+1=251的情况。原来是获取的值为字符串，所以对字符串进行了拼接。&lt;/p&gt;
&lt;p&gt;我又翻了翻js高程，仔细看了看关于字符串，数字，布尔值的互相转换问题，这里先介绍字符串转数字。&lt;br&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>实现一个弹幕墙APP</title>
    <link href="http://yoursite.com/2016/11/23/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BC%B9%E5%B9%95%E5%A2%99APP/"/>
    <id>http://yoursite.com/2016/11/23/实现一个弹幕墙APP/</id>
    <published>2016-11-23T14:46:33.000Z</published>
    <updated>2016-11-24T07:43:11.569Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://sunxiaoyu233.cn/danmu.html" target="_blank" rel="external">弹幕墙APP点这里</a></p>
<p><strong>功能:</strong> 实现发射弹幕、清除弹幕、显示弹幕功能。<br><strong>扩展:</strong> 用<a href="https://www.wilddog.com/" target="_blank" rel="external">野狗实时后端云</a>来存储弹幕数据。</p>
<p><strong>按照</strong> : 结构–&gt;样式–&gt;功能–&gt;存储  进行开发<br><a id="more"></a><br>结构和样式很简单：<br><img src="http://upload-images.jianshu.io/upload_images/3259626-879590d875c9847f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>这里注意由于要实现弹幕滚动要用到绝对定位，然后动态改变弹幕 <code>left</code> 的值。这里用到绝对定位元素的居中。</p>
<p>由于绝对定位脱离了文档流，所以用 <code>text-align:center</code> 和 <code>margin: 0 auto</code>实现不了水平居中，这里要用到一种比较暴力的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">position: absolute;</div><div class="line">top: 0;</div><div class="line">bottom: 0;</div><div class="line">left: 0;</div><div class="line">right: 0;</div></pre></td></tr></table></figure>
<p>就是使其既向上也向下，既向上又向下。这样它就不知所措，所以就乖乖的呆在中间了233</p>
<p>还有一种方法，用到css3的 <code>transform</code> 方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">position: absolute;</div><div class="line">top: 50%;</div><div class="line">left: 50%;</div><div class="line">transform: translate(-50%, -50%);</div></pre></td></tr></table></figure>
<p>就是先相对于父元素偏移50%，再使自己相对于自己移动50%。不知道为什么这种方法我没实现。</p>
<p>最重要的 <strong>功能</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//创建数据库引用</div><div class="line">var config = &#123;</div><div class="line">    authDomain: &quot;sxydanmu.wilddog.com&quot;,</div><div class="line">    syncURL: &quot;https://sxydanmu.wilddogio.com&quot;</div><div class="line">  &#125;;</div><div class="line">  wilddog.initializeApp(config);</div><div class="line">  var ref = wilddog.sync().ref();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//发射按钮事件</div><div class="line">  $(&quot;#shut&quot;).click(function() &#123;</div><div class="line">    var text = $(&quot;.s_txt&quot;).val();//获取输入框文字</div><div class="line">    ref.child(&apos;message&apos;).push(text);// 将数据写到云端 message 节点下，child 用来定位子节点</div><div class="line">    $(&quot;.s_txt&quot;).val(&apos;&apos;);//清空输入框</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//清空按钮事件</div><div class="line">  $(&quot;#clc&quot;).click(function() &#123;</div><div class="line">    ref.remove();//清空云端数据</div><div class="line">    arr = [];</div><div class="line">    $(&quot;.move&quot;).empty();//清空显示框</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 绑定 &apos;child_added&apos; 事件，当 message 节点下有子节点新增时，就会触发回调，回调的 `snapshot` 对象包含了新增的数据</div><div class="line">  ref.child(&apos;message&apos;).on(&apos;child_added&apos;, function(snapshot) &#123;</div><div class="line">  	var text = snapshot.val();</div><div class="line">    arr.push(text);</div><div class="line">    var textObj = $(&quot;&lt;div&gt;&lt;/div&gt;&quot;);</div><div class="line">    textObj.text(text);</div><div class="line">    $(&quot;.move&quot;).append(textObj);</div><div class="line">    moveObj(textObj);</div><div class="line">    console.log(text);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//清屏后清空云端数据，清空本地弹幕</div><div class="line">  ref.on(&apos;child_removed&apos;, function(snapshot) &#123;</div><div class="line">    arr = [];</div><div class="line">    $(&quot;.show&quot;).empty();</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//弹幕滚动及逐条显示</div><div class="line">var topMin = $(&apos;.message&apos;).offset().top; 	 // 显示框距顶部距离</div><div class="line">  var topMax = topMin + $(&apos;.message&apos;).height(); // 显示框底部距顶部距离</div><div class="line">  var _top = topMin; // 每个滚动消息距顶部距离</div><div class="line">  var moveObj = function(obj) &#123;</div><div class="line">  	var _left = $(&apos;.message&apos;).width() - obj.width();</div><div class="line">  	_top = _top + 50;</div><div class="line">  	if (_top &gt; (topMax - 50)) &#123;</div><div class="line">  		_top = topMin;</div><div class="line">  	&#125;</div><div class="line">  	obj.css(&#123;</div><div class="line">  		left : _left,</div><div class="line">  		top : _top,</div><div class="line">  		color : getRandomColor()  // 获取随机颜色</div><div class="line">  	&#125;);</div><div class="line">  	var time = 20000 + 10000 * Math.random();</div><div class="line">  	// animate() 方法执行 CSS 属性集的自定义动画。逐渐改变的，这样就可以创建动画效果。</div><div class="line">  	obj.animate(&#123;</div><div class="line">  		left : &quot;-&quot; + _left + &quot;px&quot;  // 让消息距左距离逐渐减小，产生右向左滚动动画。</div><div class="line">  	&#125;, time, function() &#123;</div><div class="line">  		obj.remove();</div><div class="line">  	&#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//在屏幕上输出弹幕</div><div class="line">  var getAndRun = function() &#123; //弹幕输出</div><div class="line">	if (arr.length &gt; 0) &#123;</div><div class="line">		var n = Math.floor(Math.random() * arr.length + 1) - 1;</div><div class="line">		var textObj = $(&quot;&lt;div&gt;&quot; + arr[n] + &quot;&lt;/div&gt;&quot;);</div><div class="line">		$(&quot;.move&quot;).append(textObj);</div><div class="line">		moveObj(textObj);</div><div class="line">	&#125;</div><div class="line">	setTimeout(getAndRun, 3000);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//随机颜色函数</div><div class="line">var getRandomColor = function() &#123;//随机颜色函数</div><div class="line">	return &apos;#&apos; + (function(h) &#123;</div><div class="line">		return new Array(7 - h.length).join(&quot;0&quot;) + h</div><div class="line">	&#125;)((Math.random() * 0x1000000 &lt;&lt; 0).toString(16))</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>大致就是这么多了，其实照着文档写倒也没花太多功夫。</p>
<p>写了这个弹幕APP，让我学会了写JQuery，之前一直写原生的JS，果然JQuery方便的多。不过我觉得我还是喜欢写原生的（我是不是有病）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://sunxiaoyu233.cn/danmu.html&quot;&gt;弹幕墙APP点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;功能:&lt;/strong&gt; 实现发射弹幕、清除弹幕、显示弹幕功能。&lt;br&gt;&lt;strong&gt;扩展:&lt;/strong&gt; 用&lt;a href=&quot;https://www.wilddog.com/&quot;&gt;野狗实时后端云&lt;/a&gt;来存储弹幕数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;按照&lt;/strong&gt; : 结构–&amp;gt;样式–&amp;gt;功能–&amp;gt;存储  进行开发&lt;br&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="FCC" scheme="http://yoursite.com/tags/FCC/"/>
    
      <category term="Demo" scheme="http://yoursite.com/tags/Demo/"/>
    
  </entry>
  
  <entry>
    <title>js实现一个简单的计算器</title>
    <link href="http://yoursite.com/2016/11/23/js%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    <id>http://yoursite.com/2016/11/23/js实现一个简单的计算器/</id>
    <published>2016-11-23T11:11:42.000Z</published>
    <updated>2016-11-27T02:18:44.718Z</updated>
    
    <content type="html"><![CDATA[<p> <a href="http://sunxiaoyu233.cn/FCC/calculator.html" target="_blank" rel="external">Demo戳这里</a><br><strong>功能1:</strong> 可以对两个数字进行加、减、乘、除的运算.<br><strong>功能2:</strong> 可以使用清除按钮清空当前的所有输入内容.<br><strong>功能3:</strong> 可以把多个运算连接起来操作, 直到按下等号键, 计算器输出正确的运算结果.<br><a id="more"></a></p>
<p><strong>11月27日更新</strong></p>
<p>使用 <code>switch</code> 语句代替 <code>if</code> 语句，使逻辑更清晰,代码更新部分如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//switch语句</div><div class="line">    switch (values) &#123;</div><div class="line">      case &quot;Ans&quot;:</div><div class="line"></div><div class="line">        break;</div><div class="line">      case &quot;=&quot;:</div><div class="line">          rel = eval(txt.join(&quot;&quot;));</div><div class="line">          prt.value = rel;</div><div class="line">          txt = [];</div><div class="line">          txt.push(rel);</div><div class="line">        break;</div><div class="line">      case &quot;AC&quot;:</div><div class="line">          prt.value = [];</div><div class="line">          txt = [];</div><div class="line">        break;</div><div class="line">      case &quot;CE&quot;:</div><div class="line">          txt.pop();</div><div class="line">          prt.value = txt.join(&quot;&quot;);</div><div class="line">        break;</div><div class="line">      default:</div><div class="line">        txt.push(values);</div><div class="line">        prt.value = txt.join(&quot;&quot;);</div><div class="line">      &#125;;</div></pre></td></tr></table></figure>
<p><strong>原文如下</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/3259626-0607f70596cf923c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>由于我对原生js有一种迷之热爱（微笑.jpg），所以没用JQuery。<br>css很简单，但是没仔细做，自适应也没写。</p>
<p><strong>思路:</strong></p>
<p> 给每个按钮一个Value，然后js获取点击按钮value。新建一个空的数组，每次获取点击的value之后push进去，然后用<code>arr.join(&quot;&quot;)</code>转换为字符串，并赋值给input的value就可以显示了。这里有一点，input设置为<code>readonly</code>。</p>
<p>当<code>value == &quot;=&quot;</code>时，用到<code>eval()</code>函数。</p>
<blockquote>
<p>eval() 将一个JavaScript代码字符串求值成特定的对象。</p>
</blockquote>
<p>这个函数难点在于AC和CE。AC是清除所有输入，很简单，直接另数组=[]。</p>
<p>CE的话可以用<code>arr.pop()</code>,该方法用于删除数组中最后一个元素。</p>
<p><strong>总体js代码</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">var values;</div><div class="line">var txt = [];</div><div class="line">var prt = document.getElementById(&quot;prt&quot;);</div><div class="line">var rel;</div><div class="line">function getValues() &#123;</div><div class="line">  var btns = document.getElementsByTagName(&quot;button&quot;);</div><div class="line">  for (var i = 0; i &lt; btns.length; i++) &#123;</div><div class="line">    btns[i].onclick = function() &#123;</div><div class="line">      values = this.value;</div><div class="line">      if (values !=  &quot;Ans&quot;) &#123;</div><div class="line">        if (values == &quot;=&quot;) &#123;</div><div class="line">          rel = eval(txt.join(&quot;&quot;));</div><div class="line">          console.log(rel);</div><div class="line">          prt.value = rel;</div><div class="line">          txt = [];</div><div class="line">          txt.push(rel);</div><div class="line">        &#125; else if (values == &quot;AC&quot;) &#123;</div><div class="line">          prt.value = [];</div><div class="line">          txt = [];</div><div class="line">        &#125; else if (values == &quot;CE&quot;) &#123;</div><div class="line">          txt.pop();</div><div class="line">          prt.value = txt.join(&quot;&quot;);</div><div class="line">          &#125; else &#123;</div><div class="line">            txt.push(values);</div><div class="line">            prt.value = txt.join(&quot;&quot;);</div><div class="line">          &#125;;</div><div class="line">        &#125;;</div><div class="line">        console.log(txt);</div><div class="line">      &#125;;</div><div class="line">    &#125;;</div><div class="line">  &#125;;</div><div class="line">window.onload = getValues;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;a href=&quot;http://sunxiaoyu233.cn/FCC/calculator.html&quot;&gt;Demo戳这里&lt;/a&gt;&lt;br&gt;&lt;strong&gt;功能1:&lt;/strong&gt; 可以对两个数字进行加、减、乘、除的运算.&lt;br&gt;&lt;strong&gt;功能2:&lt;/strong&gt; 可以使用清除按钮清空当前的所有输入内容.&lt;br&gt;&lt;strong&gt;功能3:&lt;/strong&gt; 可以把多个运算连接起来操作, 直到按下等号键, 计算器输出正确的运算结果.&lt;br&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="FCC" scheme="http://yoursite.com/tags/FCC/"/>
    
      <category term="Demo" scheme="http://yoursite.com/tags/Demo/"/>
    
  </entry>
  
  <entry>
    <title>如何使用gitHub Pages和Hexo搭建个人博客</title>
    <link href="http://yoursite.com/2016/11/23/%E6%96%87%E7%AB%A0%E9%A2%98%E7%9B%AE/"/>
    <id>http://yoursite.com/2016/11/23/文章题目/</id>
    <published>2016-11-23T10:53:06.000Z</published>
    <updated>2016-11-24T07:43:10.363Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;

    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/11/23/hello-world/"/>
    <id>http://yoursite.com/2016/11/23/hello-world/</id>
    <published>2016-11-23T09:35:47.939Z</published>
    <updated>2016-11-24T03:24:34.300Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
