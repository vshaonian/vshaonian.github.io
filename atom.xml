<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>少年</title>
  <subtitle>正直，纯洁，善良</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-24T15:24:21.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>少年</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js字符串转数字</title>
    <link href="http://yoursite.com/2016/11/24/js%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2016/11/24/js字符串转数字/</id>
    <published>2016-11-24T15:22:13.000Z</published>
    <updated>2016-11-24T15:24:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天写代码的时候遇到一个问题，获取了一个span元素的值，但是+1的时候却出现了25+1=251的情况。原来是获取的值为字符串，所以对字符串进行了拼接。</p>
<p>我又翻了翻js高程，仔细看了看关于字符串，数字，布尔值的互相转换问题，这里先介绍字符串转数字。<br><a id="more"></a><br>js里有三种方法可以完成字符串转数字，分别是</p>
<ul>
<li><code>Number()</code></li>
<li><code>parseInt()</code></li>
<li><code>parseFloat()</code></li>
</ul>
<p>那么它们有什么区别呢？</p>
<ol>
<li><p><code>Number()</code></p>
<ul>
<li>如果字符串只包含数字，则将其转换为十进制数值，即 <code>&quot;123&quot;</code> 会变成 <code>123</code>  </li>
<li>如果字符串包含十六进制格式，例如 <code>&quot;0xf&quot;</code> ，则将其转换为相同大小的十进制整数值</li>
<li>如果字符串为空，转换为 <code>0</code></li>
<li>如果是上述格式之外的字符，转换为 <code>NaN</code><br>例如<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var num1 = Number(&quot;Hello world!&quot;);      //NaN</div><div class="line">var num2 = Number(&quot;&quot;);                  //0</div><div class="line">var num3 = Number(&quot;000011&quot;);            //NaN</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>parseInt()</code><br>由于<code>Number()</code>处理字符串比较复杂且不够合理，所以处理整数常用 <code>parseInt()</code><br><code>parseInt()</code> 转换字符的时候，会识别字符是否符合数值模式，它会忽略字符串前面的空格，从第一个非空格字符开始解析，如果是非数字符号或正负号，则返回 <code>NaN</code> 。如果第一个非空字符是数字符号或正负号，那么会继续解析，直到解析完或遇到非数字符号，比如 <code>1234blue</code> 会被转换成 <code>1234</code>， 但是需要注意的是，小数点并不算是数字符号，所以 <code>22.5</code> 会被解析为 <code>22</code>。同时也能解析八进制或十六进制的数。<br>例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var num1 = parseInt(&quot;1234blue&quot;);      //1234</div><div class="line">var num2 = parseInt(&quot;&quot;);              //NaN</div><div class="line">var num3 = parseInt(&quot;22.5&quot;);          //22</div><div class="line">var num4 = parseInt(&quot;070&quot;);           //56(八进制数)</div><div class="line">var num5 = parseInt(&quot;0xf&quot;);           //15(十六进制数)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>另外一点，由于 <code>parseInt()</code> 在解析八进制数字的时候，ECMAScript3和5存在分歧，所以 <code>parseInt()</code> 可以制定两个参数，即转换的进制，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var num1 = parseInt(&quot;AF&quot;, 16);      //175</div><div class="line">var num2 = parseInt(&quot;AF&quot;);          //NaN</div><div class="line">var num3 = parseInt(&quot;10&quot;, 2);       //2(按二进制解析)</div><div class="line">var num4 = parseInt(&quot;10&quot;, 8);       //8(按八进制解析)</div><div class="line">var num5 = parseInt(&quot;10&quot;, 10);      //10(按十进制解析)</div><div class="line">var num6 = parseInt(&quot;10&quot;, 16);      //16(按十六进制解析)</div></pre></td></tr></table></figure></p>
<ol>
<li><code>parseFloat()</code><br>与 <code>parseInt()</code> 类似，也是从第一个字符开始解析，但是小数点是有效的，因为 <code>parseFloat()</code> 解析的不是数字符号，而是浮点数字字符，但第二个小数点就无效了。比如 <code>&quot;22.34.5&quot;</code> 会背转换为 <code>22.34</code><br>需要注意的是 <code>parseFloat()</code> 只能解析十进制的数字。<br>例如<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var num1 = parseFloat(&quot;1234blue&quot;);      //1234</div><div class="line">var num2 = parseFloat(&quot;22.5&quot;);          //22.5</div><div class="line">var num3 = parseFloat(&quot;22.34.5&quot;);       //22.34</div><div class="line">var num4 = parseFloat(&quot;0xA&quot;);           //0</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天写代码的时候遇到一个问题，获取了一个span元素的值，但是+1的时候却出现了25+1=251的情况。原来是获取的值为字符串，所以对字符串进行了拼接。&lt;/p&gt;
&lt;p&gt;我又翻了翻js高程，仔细看了看关于字符串，数字，布尔值的互相转换问题，这里先介绍字符串转数字。&lt;br&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>实现一个弹幕墙APP</title>
    <link href="http://yoursite.com/2016/11/23/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BC%B9%E5%B9%95%E5%A2%99APP/"/>
    <id>http://yoursite.com/2016/11/23/实现一个弹幕墙APP/</id>
    <published>2016-11-23T14:46:33.000Z</published>
    <updated>2016-11-24T07:43:11.569Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://sunxiaoyu233.cn/danmu.html" target="_blank" rel="external">弹幕墙APP点这里</a></p>
<p><strong>功能:</strong> 实现发射弹幕、清除弹幕、显示弹幕功能。<br><strong>扩展:</strong> 用<a href="https://www.wilddog.com/" target="_blank" rel="external">野狗实时后端云</a>来存储弹幕数据。</p>
<p><strong>按照</strong> : 结构–&gt;样式–&gt;功能–&gt;存储  进行开发<br><a id="more"></a><br>结构和样式很简单：<br><img src="http://upload-images.jianshu.io/upload_images/3259626-879590d875c9847f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>这里注意由于要实现弹幕滚动要用到绝对定位，然后动态改变弹幕 <code>left</code> 的值。这里用到绝对定位元素的居中。</p>
<p>由于绝对定位脱离了文档流，所以用 <code>text-align:center</code> 和 <code>margin: 0 auto</code>实现不了水平居中，这里要用到一种比较暴力的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">position: absolute;</div><div class="line">top: 0;</div><div class="line">bottom: 0;</div><div class="line">left: 0;</div><div class="line">right: 0;</div></pre></td></tr></table></figure>
<p>就是使其既向上也向下，既向上又向下。这样它就不知所措，所以就乖乖的呆在中间了233</p>
<p>还有一种方法，用到css3的 <code>transform</code> 方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">position: absolute;</div><div class="line">top: 50%;</div><div class="line">left: 50%;</div><div class="line">transform: translate(-50%, -50%);</div></pre></td></tr></table></figure>
<p>就是先相对于父元素偏移50%，再使自己相对于自己移动50%。不知道为什么这种方法我没实现。</p>
<p>最重要的 <strong>功能</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//创建数据库引用</div><div class="line">var config = &#123;</div><div class="line">    authDomain: &quot;sxydanmu.wilddog.com&quot;,</div><div class="line">    syncURL: &quot;https://sxydanmu.wilddogio.com&quot;</div><div class="line">  &#125;;</div><div class="line">  wilddog.initializeApp(config);</div><div class="line">  var ref = wilddog.sync().ref();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//发射按钮事件</div><div class="line">  $(&quot;#shut&quot;).click(function() &#123;</div><div class="line">    var text = $(&quot;.s_txt&quot;).val();//获取输入框文字</div><div class="line">    ref.child(&apos;message&apos;).push(text);// 将数据写到云端 message 节点下，child 用来定位子节点</div><div class="line">    $(&quot;.s_txt&quot;).val(&apos;&apos;);//清空输入框</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//清空按钮事件</div><div class="line">  $(&quot;#clc&quot;).click(function() &#123;</div><div class="line">    ref.remove();//清空云端数据</div><div class="line">    arr = [];</div><div class="line">    $(&quot;.move&quot;).empty();//清空显示框</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 绑定 &apos;child_added&apos; 事件，当 message 节点下有子节点新增时，就会触发回调，回调的 `snapshot` 对象包含了新增的数据</div><div class="line">  ref.child(&apos;message&apos;).on(&apos;child_added&apos;, function(snapshot) &#123;</div><div class="line">  	var text = snapshot.val();</div><div class="line">    arr.push(text);</div><div class="line">    var textObj = $(&quot;&lt;div&gt;&lt;/div&gt;&quot;);</div><div class="line">    textObj.text(text);</div><div class="line">    $(&quot;.move&quot;).append(textObj);</div><div class="line">    moveObj(textObj);</div><div class="line">    console.log(text);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//清屏后清空云端数据，清空本地弹幕</div><div class="line">  ref.on(&apos;child_removed&apos;, function(snapshot) &#123;</div><div class="line">    arr = [];</div><div class="line">    $(&quot;.show&quot;).empty();</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//弹幕滚动及逐条显示</div><div class="line">var topMin = $(&apos;.message&apos;).offset().top; 	 // 显示框距顶部距离</div><div class="line">  var topMax = topMin + $(&apos;.message&apos;).height(); // 显示框底部距顶部距离</div><div class="line">  var _top = topMin; // 每个滚动消息距顶部距离</div><div class="line">  var moveObj = function(obj) &#123;</div><div class="line">  	var _left = $(&apos;.message&apos;).width() - obj.width();</div><div class="line">  	_top = _top + 50;</div><div class="line">  	if (_top &gt; (topMax - 50)) &#123;</div><div class="line">  		_top = topMin;</div><div class="line">  	&#125;</div><div class="line">  	obj.css(&#123;</div><div class="line">  		left : _left,</div><div class="line">  		top : _top,</div><div class="line">  		color : getRandomColor()  // 获取随机颜色</div><div class="line">  	&#125;);</div><div class="line">  	var time = 20000 + 10000 * Math.random();</div><div class="line">  	// animate() 方法执行 CSS 属性集的自定义动画。逐渐改变的，这样就可以创建动画效果。</div><div class="line">  	obj.animate(&#123;</div><div class="line">  		left : &quot;-&quot; + _left + &quot;px&quot;  // 让消息距左距离逐渐减小，产生右向左滚动动画。</div><div class="line">  	&#125;, time, function() &#123;</div><div class="line">  		obj.remove();</div><div class="line">  	&#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//在屏幕上输出弹幕</div><div class="line">  var getAndRun = function() &#123; //弹幕输出</div><div class="line">	if (arr.length &gt; 0) &#123;</div><div class="line">		var n = Math.floor(Math.random() * arr.length + 1) - 1;</div><div class="line">		var textObj = $(&quot;&lt;div&gt;&quot; + arr[n] + &quot;&lt;/div&gt;&quot;);</div><div class="line">		$(&quot;.move&quot;).append(textObj);</div><div class="line">		moveObj(textObj);</div><div class="line">	&#125;</div><div class="line">	setTimeout(getAndRun, 3000);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//随机颜色函数</div><div class="line">var getRandomColor = function() &#123;//随机颜色函数</div><div class="line">	return &apos;#&apos; + (function(h) &#123;</div><div class="line">		return new Array(7 - h.length).join(&quot;0&quot;) + h</div><div class="line">	&#125;)((Math.random() * 0x1000000 &lt;&lt; 0).toString(16))</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>大致就是这么多了，其实照着文档写倒也没花太多功夫。</p>
<p>写了这个弹幕APP，让我学会了写JQuery，之前一直写原生的JS，果然JQuery方便的多。不过我觉得我还是喜欢写原生的（我是不是有病）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://sunxiaoyu233.cn/danmu.html&quot;&gt;弹幕墙APP点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;功能:&lt;/strong&gt; 实现发射弹幕、清除弹幕、显示弹幕功能。&lt;br&gt;&lt;strong&gt;扩展:&lt;/strong&gt; 用&lt;a href=&quot;https://www.wilddog.com/&quot;&gt;野狗实时后端云&lt;/a&gt;来存储弹幕数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;按照&lt;/strong&gt; : 结构–&amp;gt;样式–&amp;gt;功能–&amp;gt;存储  进行开发&lt;br&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="FCC" scheme="http://yoursite.com/tags/FCC/"/>
    
      <category term="Demo" scheme="http://yoursite.com/tags/Demo/"/>
    
  </entry>
  
  <entry>
    <title>js实现一个简单的计算器</title>
    <link href="http://yoursite.com/2016/11/23/js%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    <id>http://yoursite.com/2016/11/23/js实现一个简单的计算器/</id>
    <published>2016-11-23T11:11:42.000Z</published>
    <updated>2016-11-24T07:43:12.268Z</updated>
    
    <content type="html"><![CDATA[<p> <a href="http://sunxiaoyu233.cn/FCC/calculator.html" target="_blank" rel="external">Demo戳这里</a><br><strong>功能1:</strong> 可以对两个数字进行加、减、乘、除的运算.<br><strong>功能2:</strong> 可以使用清除按钮清空当前的所有输入内容.<br><strong>功能3:</strong> 可以把多个运算连接起来操作, 直到按下等号键, 计算器输出正确的运算结果.<br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/3259626-0607f70596cf923c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>由于我对原生js有一种迷之热爱（微笑.jpg），所以没用JQuery。<br>css很简单，但是没仔细做，自适应也没写。</p>
<p><strong>思路:</strong></p>
<p> 给每个按钮一个Value，然后js获取点击按钮value。新建一个空的数组，每次获取点击的value之后push进去，然后用<code>arr.join(&quot;&quot;)</code>转换为字符串，并赋值给input的value就可以显示了。这里有一点，input设置为<code>readonly</code>。</p>
<p>当<code>value == &quot;=&quot;</code>时，用到<code>eval()</code>函数。</p>
<blockquote>
<p>eval() 将一个JavaScript代码字符串求值成特定的对象。</p>
</blockquote>
<p>这个函数难点在于AC和CE。AC是清除所有输入，很简单，直接另数组=[]。</p>
<p>CE的话可以用<code>arr.pop()</code>,该方法用于删除数组中最后一个元素。</p>
<p><strong>总体js代码</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">var values;</div><div class="line">var txt = [];</div><div class="line">var prt = document.getElementById(&quot;prt&quot;);</div><div class="line">var rel;</div><div class="line">function getValues() &#123;</div><div class="line">  var btns = document.getElementsByTagName(&quot;button&quot;);</div><div class="line">  for (var i = 0; i &lt; btns.length; i++) &#123;</div><div class="line">    btns[i].onclick = function() &#123;</div><div class="line">      values = this.value;</div><div class="line">      if (values !=  &quot;Ans&quot;) &#123;</div><div class="line">        if (values == &quot;=&quot;) &#123;</div><div class="line">          rel = eval(txt.join(&quot;&quot;));</div><div class="line">          console.log(rel);</div><div class="line">          prt.value = rel;</div><div class="line">          txt = [];</div><div class="line">          txt.push(rel);</div><div class="line">        &#125; else if (values == &quot;AC&quot;) &#123;</div><div class="line">          prt.value = [];</div><div class="line">          txt = [];</div><div class="line">        &#125; else if (values == &quot;CE&quot;) &#123;</div><div class="line">          txt.pop();</div><div class="line">          prt.value = txt.join(&quot;&quot;);</div><div class="line">          &#125; else &#123;</div><div class="line">            txt.push(values);</div><div class="line">            prt.value = txt.join(&quot;&quot;);</div><div class="line">          &#125;;</div><div class="line">        &#125;;</div><div class="line">        console.log(txt);</div><div class="line">      &#125;;</div><div class="line">    &#125;;</div><div class="line">  &#125;;</div><div class="line">window.onload = getValues;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;a href=&quot;http://sunxiaoyu233.cn/FCC/calculator.html&quot;&gt;Demo戳这里&lt;/a&gt;&lt;br&gt;&lt;strong&gt;功能1:&lt;/strong&gt; 可以对两个数字进行加、减、乘、除的运算.&lt;br&gt;&lt;strong&gt;功能2:&lt;/strong&gt; 可以使用清除按钮清空当前的所有输入内容.&lt;br&gt;&lt;strong&gt;功能3:&lt;/strong&gt; 可以把多个运算连接起来操作, 直到按下等号键, 计算器输出正确的运算结果.&lt;br&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="FCC" scheme="http://yoursite.com/tags/FCC/"/>
    
      <category term="Demo" scheme="http://yoursite.com/tags/Demo/"/>
    
  </entry>
  
  <entry>
    <title>如何使用gitHub Pages和Hexo搭建个人博客</title>
    <link href="http://yoursite.com/2016/11/23/%E6%96%87%E7%AB%A0%E9%A2%98%E7%9B%AE/"/>
    <id>http://yoursite.com/2016/11/23/文章题目/</id>
    <published>2016-11-23T10:53:06.000Z</published>
    <updated>2016-11-24T07:43:10.363Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;

    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/11/23/hello-world/"/>
    <id>http://yoursite.com/2016/11/23/hello-world/</id>
    <published>2016-11-23T09:35:47.939Z</published>
    <updated>2016-11-24T03:24:34.300Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
