<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>少年</title>
  <subtitle>正直，纯洁，善良</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-28T12:21:03.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>少年</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于原型链的理解</title>
    <link href="http://yoursite.com/2017/03/28/%E5%85%B3%E4%BA%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/03/28/关于原型链的理解/</id>
    <published>2017-03-28T12:19:52.000Z</published>
    <updated>2017-03-28T12:21:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>JS初学者会遇到的三大难题：闭包，原型，继承。今天我来讲讲我对原型的理解，如果哪里有错误的地方，还请大家指正</p>
<a id="more"></a>
<p><strong>首先是关于prototype</strong></p>
<p>我们每创建一个函数，它都会包括一个<code>prototype</code>属性。这个属性是一个指针，指向一个对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">function foo()&#123;&#125;</div><div class="line">typeof foo.prototype // &quot;object&quot;</div></pre></td></tr></table></figure></p>
<p>那么这个对象里面有什么呢？</p>
<p><img src="//upload-images.jianshu.io/upload_images/3259626-00420020891397ad.png" alt=""></p>
<p>可以看到里面有一个<code>constructor</code>属性和一个<code>__proto__</code>属性。而且<code>constructor</code>指向了<code>foo</code></p>
<p>那么为什么每次创建函数的时候都会有这个属性呢？看下面这个例子</p>
<p><img src="//upload-images.jianshu.io/upload_images/3259626-2b770d22e7cb17f9.png" alt=""></p>
<p>那么问题来了，儿子哪来的钱呢？原来是父亲的钱。可是父亲的钱为什么可以算到儿子头上呢？是不是可以理解为父亲的<code>prototype</code>里的属性都会被儿子继承。</p>
<p>对了这就是<code>prototype</code>的作用，<strong>每个通过构造器构造出来的实例都可以拥有<code>prototype</code>里的属性</strong>（实例就是通过构造器构造出来的对象，比如儿子就是父亲的实例）</p>
<p>那么儿子为什么可以拿到父亲的钱呢？换句话说，父亲为什么会把钱给儿子呢。现实中你可能会说了，因为<strong>血缘关系</strong>。</p>
<p>同样在js里也有血缘关系，那就是<strong>[[Prototype]]</strong></p>
<p><strong>关于[[Prototype]]和属性查找</strong></p>
<p>儿子并没有钱，通过血缘关系获得了父亲的钱，这就是属性查找。</p>
<p>在js里就是，引擎在<code>son</code>函数里查找有没有<code>money</code>这个属性，如果这个函数没有这个属性，会顺着<em>血缘关系</em>查找上一级，也就是<code>father</code>函数，如果有<code>money</code>属性，就返回这个属性的值，如果没有，会继续向上一级查找，直到查找到顶级对象，如果还没有，就会返回<code>undefined</code>。这就是<strong>原型链</strong>。就好像问儿子，有车吗？没有。然后儿子去问父亲，父亲也没用，再去上一级问。。如果全家都没有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">son.car // undefined</div></pre></td></tr></table></figure></p>
<p>我们多次提到<em>血缘关系</em>，前面也说过在js里是<code>[[Prototype]]</code>。但是这个属性是js内置的属性，并不能让我们使用。所以在chrome和firefox里提供了<code>__proto__</code>来表示<em>血缘关系</em>。后面我们都使用<code>__proto__</code>来代替<code>[[Prototype]]</code>。但是一定要注意在开发的时候不能使用<code>__proto__</code>。</p>
<p>来继续看<br><img src="//upload-images.jianshu.io/upload_images/3259626-248e39a3e4a88f06.png" alt=""></p>
<p>奇怪的是<code>son.__proto__</code>并不指向<code>father</code>。而是指向一个对象，这个对象的<code>constructor</code>指向<code>father</code>函数。</p>
<p>通过前面的了解，这个对象不就是<code>father.prototype</code>吗。我们验证一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">son.__proto__ === father.prototype // true</div></pre></td></tr></table></figure></p>
<p>是不是觉得原型关系快要浮出水面了</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3259626-7425111c2a38a404.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>属性查找就是顺着<code>__proto__</code>查找，<code>__proto__</code>链就是原型链</strong></p>
<p><strong>那么js为什么要设计一个不能在开发中使用的内置<strong>proto</strong></strong></p>
<p>在正常的面向对象的语言里，一个类所实例化的对象，里面都会有这个类所有属性的复制。</p>
<p>但是js没有类啊，怎么实现关联呢。所以就有了<code>__proto__</code></p>
<p>回头看一下，好像还有一个属性还没有讲</p>
<p><strong>关于constructor</strong></p>
<p>注意这个属性<strong>并不是</strong>表示由谁构造。或者说并不能准确的表示。我们来看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">son.constructor === father // true</div><div class="line"></div><div class="line">// 父亲改嫁了（重写原型对象）</div><div class="line">father.prototype = &#123;money: 300&#125;</div><div class="line"></div><div class="line">// 又生了一个女儿</div><div class="line">var daughter = new father();</div><div class="line"></div><div class="line">daughter.constructor === father // false</div><div class="line">daughter.constructor === Object // true</div><div class="line">// 这就有点奇妙了</div></pre></td></tr></table></figure>
<p>为什么会造成这种情况呢</p>
<p><strong>其实<code>constructor</code>准备的说是指向引用对象关联的函数</strong></p>
<p>因为实例其实并没有<code>constructor</code>属性，这个属性是委托在实例的<code>__proto__</code>对象上。所以把一个新的对象赋值给<code>father</code>之后，新的实例的<code>constructor</code>其实通过<code>__proto__</code>指向了新的对象<code>{monet: 300}</code>的<code>constructor</code>。这个对象是通过字面量的方式创建的，所以他的<code>constructor</code>是指向<code>Object</code>的</p>
<p><strong>上面都懂了的话，我要放大招了</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/3259626-6d2feee5a058e6ba.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原型链完全图解，图片来自谷歌"></p>
<p>不要慌。。一点一点来看</p>
<p>首先<code>f2</code>和<code>f1</code>是由<code>Foo</code>构造出来的，所以它们的<code>__proto__</code>指向<code>Foo.prototype</code>，而<code>Foo.prototype</code>是一个对象，所以它的<code>__proto__</code>指向顶级对象<code>Object.prototype</code></p>
<p><code>o1</code>和<code>o2</code>是对象字面量构造出来的，相当于<code>new Object</code>。所以它们的<code>__proto__</code>直接指向<code>Object.prototype</code></p>
<p><strong>那为什么<code>Foo</code>的<code>__proto__</code>指向<code>Function.prototype</code>呢？</strong></p>
<p>因为<code>Function</code>是一个顶级构造器，而<code>Foo</code>函数相当于<code>new Function</code>构造出来的。也就是在js里，所有的函数，它们的<code>__proto__</code>都是指向<code>Function.prototype</code>（包括它自己和Object）。而<code>Function.prototype</code>又指向<code>Object.prototype</code>。</p>
<p>所以原型链的顶端，也就是顶级对象是<code>Object.prototype</code>，它是<code>Object</code>的实例，而<code>Object</code>本身是一个构造器</p>
<p>九九归一…</p>
<p>应该就是这么多了，欢迎指正</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS初学者会遇到的三大难题：闭包，原型，继承。今天我来讲讲我对原型的理解，如果哪里有错误的地方，还请大家指正&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue踩坑之Vue-router</title>
    <link href="http://yoursite.com/2017/03/24/Vue%E8%B8%A9%E5%9D%91%E4%B9%8BVue-router/"/>
    <id>http://yoursite.com/2017/03/24/Vue踩坑之Vue-router/</id>
    <published>2017-03-24T06:54:29.000Z</published>
    <updated>2017-03-24T06:55:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>照着教程学习Vue，由于教程使用的是Vue1，但是我用npm安装的是2.0版本，所以开始了踩坑之旅</p>
<a id="more"></a>
<p><strong>关于Vue-router2</strong></p>
<p>我直接用npm安装的模板是这样的</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3259626-46a4045b7bb4b30e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>这里是直接有个router文件夹的，路由的信息都在这里面的index.js文件里面</p>
<p>这是原来的路由配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;;</div><div class="line">import Router from &apos;vue-router&apos;;</div><div class="line">import Hello from &apos;components/Hello&apos;;</div><div class="line"></div><div class="line">Vue.use(Router);</div><div class="line"></div><div class="line">export default new Router(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: &apos;/&apos;,</div><div class="line">      components: &#123;</div><div class="line">        default: Hello</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>可以看出<code>path: &#39;/&#39;</code>就是根目录下的组件，默认是Hello，如果我们想在页面中再引入一个组件，就可以直接在这个path目录下写，比如我们再加个header组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;;</div><div class="line">import Router from &apos;vue-router&apos;;</div><div class="line">import Hello from &apos;components/Hello&apos;;</div><div class="line">// 导入组件</div><div class="line">import Header from &apos;components/header/header&apos;;</div><div class="line"></div><div class="line">Vue.use(Router);</div><div class="line"></div><div class="line">export default new Router(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: &apos;/&apos;,</div><div class="line">      components: &#123;</div><div class="line">        default: Hello,</div><div class="line">        // 注册组件，命名为Header</div><div class="line">        Header: Header</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>然后在App.vue文件内写入就好了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;router-view name=&quot;Header&quot;&gt;&lt;/router-view&gt;</div></pre></td></tr></table></figure></p>
<p>不同的组件以name区分，所以要记得带上name,默认的就可以省略。</p>
<p><strong>不同地址的组件</strong></p>
<p>比如我们要实现点击跳转到该组件</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3259626-b9d459f8dd174642.gif?imageMogr2/auto-orient/strip" alt="不同页面之间的组件"></p>
<p>仍然在router文件夹里的index.js文件内，继续配置router信息就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;;</div><div class="line">import Router from &apos;vue-router&apos;;</div><div class="line">import Hello from &apos;components/Hello&apos;;</div><div class="line">import Header from &apos;components/header/header&apos;;</div><div class="line">import goods from &apos;components/goods/goods&apos;;</div><div class="line">import ratings from &apos;components/ratings/ratings&apos;;</div><div class="line">import seller from &apos;components/seller/seller&apos;;</div><div class="line"></div><div class="line">Vue.use(Router);</div><div class="line"></div><div class="line">export default new Router(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: &apos;/&apos;,</div><div class="line">      components: &#123;</div><div class="line">        default: Hello,</div><div class="line">        Header: Header</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      // 地址</div><div class="line">      path: &apos;/goods&apos;,</div><div class="line">      components: &#123;</div><div class="line">        default: goods</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: &apos;/ratings&apos;,</div><div class="line">      components: &#123;</div><div class="line">        default: ratings</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: &apos;/seller&apos;,</div><div class="line">      components: &#123;</div><div class="line">        default: seller</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>然后在App.vue里使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 这里相当于一个a标签</div><div class="line">&lt;router-link to=&quot;/goods&quot;&gt;商品&lt;/router-link&gt;</div><div class="line"></div><div class="line">// 然后在相应的区域里显示</div><div class="line">&lt;router-view&gt;&lt;/router-view&gt;</div></pre></td></tr></table></figure></p>
<p>以上代码均可以在<a href="https://github.com/vshaonian/eleme" target="_blank" rel="external">我的Github</a>找到。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;照着教程学习Vue，由于教程使用的是Vue1，但是我用npm安装的是2.0版本，所以开始了踩坑之旅&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="Demo" scheme="http://yoursite.com/tags/Demo/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序的可视化</title>
    <link href="http://yoursite.com/2017/03/10/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://yoursite.com/2017/03/10/冒泡排序的可视化/</id>
    <published>2017-03-10T04:42:54.000Z</published>
    <updated>2017-03-10T04:44:05.688Z</updated>
    
    <content type="html"><![CDATA[<p>这是IFE基础JavaScript练习（二），实现冒泡排序的可视化，用高度表示数字的大小，然后可视化的进行排序（由于冒泡排序比较简单，我就先从冒泡排序开始）</p>
<a id="more"></a>
<p><strong>效果图如下</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/3259626-b17cbcb6014812a7.gif?imageMogr2/auto-orient/strip" alt="冒泡排序"><br><a href="http://sunxiaoyu233.cn/ife/binbin/task5/" target="_blank" rel="external">点击排序</a></p>
<p><strong>什么是冒泡排序</strong></p>
<blockquote>
<p>冒泡排序是一种简单的交换类排序方法。基本思想是：从头开始扫描待排序数组，按顺序比较相邻两元素的大小。在第一趟排序中，从第一个数开始，比较其与后一位元素的大小，如果是逆序，就交换顺序，再对下一位元素开始操作。然后第二趟的时候对前n-1个进行操作（因为最后一位已经是最大的了）</p>
</blockquote>
<p>具体来说，比如</p>
<p>原始数组<br>[13, 46, 25, 39, 30]</p>
<p>第一次排序<br>[<strong>13</strong>, <strong>46</strong>, 25, 39, 30]   （从第一位开始比较是否逆序，如果是则交换位置）<br>[13, <strong>46</strong>, <strong>25</strong>, 39, 30]  （逆序，交换位置，继续比较）<br>[13, 25, <strong>46</strong>, <strong>39</strong>, 30]  （逆序，交换位置，继续比较）<br>[13, 25, 39, <strong>46</strong>, <strong>30</strong>]  （逆序，交换位置，继续比较）<br>[13, 25, 39, 30, 46] （第一次完成）</p>
<p>第二次排序<br>[<strong>13</strong>,<strong> 25</strong>, 39, 30, 46]<br>[13, <strong>25</strong>, <strong>39</strong>, 30, 46]<br>[13, 25, <strong>39</strong>, <strong>30</strong>, 46] （逆序，交换顺序）<br>[13, 25, 30, 39, 46]  （第二次完成，注意最后一位不再进行比较）</p>
<p><strong>算法实现</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var sort = function (arr) &#123;</div><div class="line">    for (var k = 0; k &lt; arr.length; k++) &#123;</div><div class="line">        for (var j = 0; j &lt; arr.length - k - 1; j++) &#123;</div><div class="line">            if (arr[j] &gt; arr[j + 1]) &#123;</div><div class="line">               var temp = arr[j];</div><div class="line">               arr[j] = arr[j + 1];</div><div class="line">               arr[j + 1] = temp;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>接下来是可视化</strong></p>
<p>我们要用高度来表示数组元素的大小，可以这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function printf() &#123;</div><div class="line">        wrap.innerHTML = &quot;&quot;;  //清空上次数据</div><div class="line">        for (var i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">            var div = document.createElement(&quot;div&quot;);</div><div class="line">            div.setAttribute(&quot;class&quot;, &quot;count&quot;); //设置class方便写样式</div><div class="line">            div.innerHTML = arr[i];</div><div class="line">            wrap.appendChild(div);</div><div class="line">            div.style.height = (5 * arr[i]) + &quot;px&quot;; //设置高度</div><div class="line">            div.style.left = (i * 35) + &quot;px&quot;; //设置绝对定位的位置</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>我们在css里给它们绝对定位，然后遍历数组进行输出，根据大小设置高度。如果和我一样有输入和输出的按钮可以给按钮绑定这个事件。如果只有一个输入框的话，可以给输入框绑定失焦事件，注意对数据正确性做验证。</p>
<p><strong>现在就变成这样了</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/3259626-1409422491e46992.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>怎么让它动起来呢</strong></p>
<p>思路：用数组记录每趟排序后的状态，定时根据状态数组更新DOM，这样看起来就像动画一样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">var sort = document.getElementById(&quot;sort&quot;);</div><div class="line">    sort.onclick = function () &#123;</div><div class="line">        if (arr.length === 0) &#123;</div><div class="line">            alert(&quot;还没有输入数字哦！&quot;)</div><div class="line">        &#125; else &#123;</div><div class="line">            var domArr = [].slice.call(document.getElementsByClassName(&quot;count&quot;));</div><div class="line">            var state = [];</div><div class="line">            var sort = function (arr) &#123;</div><div class="line">                for (var k = 0; k &lt; arr.length; k++) &#123;</div><div class="line">                    for (var j = 0; j &lt; arr.length - k - 1; j++) &#123;</div><div class="line">                        if (arr[j] &gt; arr[j + 1]) &#123;</div><div class="line">                            var temp = arr[j];</div><div class="line">                            arr[j] = arr[j + 1];</div><div class="line">                            arr[j + 1] = temp;</div><div class="line">                            state.push(JSON.parse(JSON.stringify(arr)));</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            sort(arr);</div><div class="line">            var draw = function () &#123;</div><div class="line">                var bar, numArr;</div><div class="line">                numArr = state.shift() || [];</div><div class="line">                var q = 0;</div><div class="line">                for (bar in domArr) &#123;</div><div class="line">                    if (numArr[bar] !== undefined) &#123;</div><div class="line">                        domArr[bar].style.height = (5 * parseInt(numArr[bar])) + &quot;px&quot;;</div><div class="line">                        domArr[bar].style.left = (q * 35) + &quot;px&quot;;</div><div class="line">                        domArr[bar].innerHTML = numArr[bar];</div><div class="line">                        q++;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            setInterval(draw, 200);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>ok啦，<a href="https://github.com/vshaonian/IFE2017/blob/master/binbin/task5/index.html" target="_blank" rel="external">源码在这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是IFE基础JavaScript练习（二），实现冒泡排序的可视化，用高度表示数字的大小，然后可视化的进行排序（由于冒泡排序比较简单，我就先从冒泡排序开始）&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Demo" scheme="http://yoursite.com/tags/Demo/"/>
    
      <category term="IFE" scheme="http://yoursite.com/tags/IFE/"/>
    
  </entry>
  
  <entry>
    <title>纯原生JS实现H5小游戏</title>
    <link href="http://yoursite.com/2017/02/27/%E7%BA%AF%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0H5%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <id>http://yoursite.com/2017/02/27/纯原生JS实现H5小游戏/</id>
    <published>2017-02-27T13:09:53.000Z</published>
    <updated>2017-02-27T13:12:25.450Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="http://sunxiaoyu233.cn/jstask/task2-1.html" target="_blank" rel="external">试玩地址，请使用手机打开</a></strong><br><strong>代码放在了<a href="https://github.com/vshaonian/killgame" target="_blank" rel="external">github</a></strong></p>
<a id="more"></a>
<blockquote>
<p><strong>杀人游戏流程</strong><br>2-1:冷启动界面<br>2-2：版本选择（其实只有一个版本）<br>2-3:设置玩家人数<br>3:身份查看页<br>4-1:法官查看页<br>4-2:显示天数<br>4-3:杀人页<br>4-4:黑夜解密<br>4-5:投票页<br>4-6:结果页<br>设置玩家人数,可满足6-18人游戏。设置完成之后，依次查看自己的身份，不要泄露给他人。然后法官查看身份，宣布开始游戏。<br>晚上，杀手杀人。白天公布被杀玩家，被杀的玩家发言，全体讨论后投票。<br>当水民全部死亡，杀手获得胜利，反之杀手全部死亡，水民获胜。</p>
</blockquote>
<p><strong>篇幅有限，这里我只说一下实现的最主要的地方</strong></p>
<p><strong>1. ​localStorage</strong><br>关于localStorage与Cookie的与别:<br>Cookie主要用来保存登陆信息，大小被限制在4KB左右<br>localStorage即本地储存，是HTML5标准新加入的技术。大小通常为5M左右，兼容IE8及以上浏览器<br>用法：</p>
<ol>
<li>写入:<code>localStorage.str = &quot;Hello world!&quot;</code>或者<code>localStorage.setItem(&quot;str&quot;,&quot;Hello World!&quot;)</code></li>
<li>读取：<code>var nStr = localStorage.str;</code>或者<code>var nStr = localStorage.getItem(&quot;str&quot;);</code></li>
<li>localStorage是一个对象，所以有长度，可遍历<br>localStorage注意事项：<br>使用localStorage储存在本地均为字符串，比如<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">localStorage.num = 3;</div><div class="line">console.log(typeof localStorage.num); //string</div></pre></td></tr></table></figure>
</li>
</ol>
<p>所以取本地储存中的值的时候，需要类型转换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var num = JSON.parse(localStorage.num);</div><div class="line">console.log(typeof num); //number</div></pre></td></tr></table></figure></p>
<p>对数组和对象要在储存前将其转换为JSON字符串才能保证取出来的还是原来的类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3];</div><div class="line">localStorage.arr = JSON.stringify(arr); //转换为JSON字符串</div><div class="line">var nStr = JSON.parse(localStorage.arr);</div><div class="line">console.log(typeof nStr); //object</div></pre></td></tr></table></figure></p>
<p><strong>2. DOM操作</strong><br>一些基本的DOM操作，比如这里向HTML追加元素</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3259626-568f02522f39be67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="追加元素"><br>采用的方法就是分别对杀手人数和水民人数进行遍历，进行以下操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var parent = document.getElementById(&quot;xx&quot;); //找到父元素</div><div class="line">var span = document.creatElement(&quot;span&quot;);//穿件标签</div><div class="line">span.innerHTML = &quot;xxxxx&quot;;//标签内容</div><div class="line">parent.appendChild(span);//向父元素追加</div></pre></td></tr></table></figure></p>
<p>还有比如更改节点属性，在判断是否胜利的时候，如果达到胜利条件的话，就要更改<code>a</code>标签的<code>href</code>属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.setAttribute(name,value);</div></pre></td></tr></table></figure></p>
<p><strong>3. 计时器</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/3259626-add40ba9a6dbfe6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="计时器"><br>主要思路是：<br>在每天开始的时候，使用<code>new  Date()</code>获取当前的时间，然后存到localStorage里面，在每天结束的时候，再获取一个当前时间，并把localStorage里的时间取出来，相减，得到的就是这一天用的时间。<br>在每天开始时的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">btn.addEventListener(&quot;click&quot;,function () &#123;</div><div class="line">    var time = new Date();</div><div class="line">    localStorage.time = time;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>每天结束时的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">btn.addEventListener(&quot;click&quot;,function () &#123;</div><div class="line">        var time = new Date() - new Date(localStorage.time);</div><div class="line">        var name = &quot;time&quot; + (deadPlayer.length / 2);//根据死亡了几个玩家来判断是第几天，分配localStorage的名字</div><div class="line">        localStorage.setItem(name,time);</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p>
<p>结果就是这样的</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3259626-cf43e8fed3e328ac.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="储存的时间"><br>还有一点</p>
<p>我们是在每天结束的时候相减得到该天的时间的，那如果这天只过了一半就获胜了呢？最后一天的时间就没了，所以在达到胜利条件的时候我们需要再储存一次最后一天的耗时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if(aliveWaters === 0 || aliveKillers === 0) &#123;</div><div class="line">     //修复计时BUG</div><div class="line">     var lastTime = new Date() - new Date(localStorage.time);</div><div class="line">     localStorage.lastTime = lastTime;</div><div class="line">     btn.parentNode.setAttribute(&quot;href&quot;, &quot;task4-6.html&quot;);</div><div class="line"> &#125; else &#123;</div><div class="line">     btn.parentNode.setAttribute(&quot;href&quot;, &quot;task4-4.html&quot;)</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>如果活着的杀手或者活着的水民人数为0，就满足获胜条件，就立刻获取时间然后相减，因为不知道是第几天，所以就干脆命名为lastTime</p>
<p>我们得到了每天的时间，但是是存在本地储存里的，我们要取出来，之前说<code>localStorage</code>又长度，可遍历，这里就要对<code>localStorage</code>进行遍历。通过localStorage.getItem(name)来获取对应的值</p>
<p>因为我们在localStorage里存了很多东西，比如活着的人数，死亡玩家的数组等等，我们只想要<code>name</code>为<code>time*</code>这种格式的，所以我们验证<code>name</code>前4个字符为<code>name</code>的取出来存到数组里待用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//获取储存在本地的时间</div><div class="line">var timeArr = [];</div><div class="line">for(var i = 0; i &lt; localStorage.length; i++) &#123;</div><div class="line">    if(localStorage.key(i).substring(0,4) === &quot;time&quot;) &#123;</div><div class="line">        var getValue = localStorage.getItem(localStorage.key(i));</div><div class="line">        timeArr.push(Math.floor(parseInt(getValue) / 1000));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//因为存的还有time这个值，前面讲了它是用来获取当时的时间的，它的前4位也满足，所以也给取出来了，但是它是没用的，所以给他删除</div><div class="line">timeArr.shift();</div><div class="line"></div><div class="line">//修复计时bug</div><div class="line">var lastTime = parseInt(localStorage.lastTime);</div><div class="line">timeArr.push(Math.floor(lastTime / 1000));</div></pre></td></tr></table></figure></p>
<p>然后关于时间的格式，经过上面的处理，我们得到了单位为秒的数组，但是我们不能直接把秒输出到HMTL里，我们应该输出为<code>xx小时xx分钟xx秒</code>这样的格式，还牵扯到补0的问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//把秒转化为标准时间</div><div class="line">function time(s) &#123;</div><div class="line">    var hours = Math.floor(s / 3600);</div><div class="line">    var minutes = Math.floor(s % 3600 / 60);</div><div class="line">    var seconds = Math.floor(s % 3600 % 60);</div><div class="line">    </div><div class="line">    return (hours &gt; 0 ? hours + &quot;小时&quot; + (minutes &lt; 10 ? &quot;0&quot; : &quot;&quot;) : &quot;&quot;) + (minutes &gt; 0 ? minutes + &quot;分钟&quot; +</div><div class="line">            (seconds &lt; 10 &amp;&amp; seconds &gt; 0 ? &quot;0&quot; : &quot;&quot;): &quot;&quot;)  + (seconds &gt; 0 ? seconds + &quot;秒&quot; : &quot;&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于<code>return</code>那一大块，其实就是一个条件操作符，相当于<code>if(){}else{}</code><br>比如比较大小，如果num1&gt;num2就把num1赋值给结果，否则就赋值num2。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var max = (num1 &gt; num2) ? num1 : num2;</div></pre></td></tr></table></figure></p>
<p><strong>4. 点击事件</strong><br>onclick 与 addEventListener的区别：<br><code>addEventListener</code>是DOM2级事件处理程序，支持IE9以上，一个事件可以绑定多个函数，默认是false，冒泡阶段触发<br><code>onclick</code>是DOM0级事件处理程序，冒泡阶段触发</p>
<p>比如一个使方框变色的函数可以这样写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for(var i = 0; i &lt; liNum.length; i++) &#123;</div><div class="line">    liNum[i].onclick = function () &#123;</div><div class="line">        this.style.borderColor = &quot;red&quot;;//注意这里要用this而不能用liNum[i]，涉及到闭包，后面会讲</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为各个方框添加了点击事件之后，点击变色之后，再点击另一个，问题出现了。第二个变色了，但是第一个并没有变回去。我们的本意并不是这样的。。<br>解决办法就是，先定义一个临时变量，让它指向一个没有用的DOM节点（不指定节点的话接下来会报错）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var temp = document.getElementById(&quot;fix&quot;);</div><div class="line">btn.addEventListener(&quot;click&quot;,function()&#123;</div><div class="line">    temp.style.borderColor = &quot;#fff&quot;;</div><div class="line">    temp = this;</div><div class="line">    temp.style.borderColor = &quot;red&quot;;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>比如第一次我们点击了第一个li，此时<code>temp</code>等于id为fix的元素，使它边框变为白色，然后把第一个li赋值给<code>temp</code>，然后使<code>temp</code>（也就是第一个li）边框变红，然后第二次点击的时候，此时<code>temp</code>是等于第一个li的，我们会先把上次点击的li（也就是第一个）变回原来的颜色，然后把这次点击的li赋值给<code>temp</code>，继续变色。</p>
<p>这就完成了每次变色之前把上次点击的恢复颜色的效果，其实就是用一个中间值记录上次点击的数据</p>
<p>接下来讲刚刚说的闭包</p>
<p>比如我们有这样一个DOM结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div id=&quot;div2&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div id=&quot;div3&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div id=&quot;div4&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div id=&quot;div5&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div id=&quot;div6&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div id=&quot;div7&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div id=&quot;div8&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div id=&quot;div9&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>和这样一段js代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var count = document.getElementsByTagName(&quot;div&quot;);</div><div class="line"></div><div class="line">for(var i = 0; i &lt; count.length; i++) &#123;</div><div class="line">	count[i].onclick = function () &#123;</div><div class="line">		console.log(i);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果并不是想象中那样每次点击输出对应的 i 。而是无论点击哪个，都会输出 9 。可以自己试一下</p>
<p>那为什么是这样呢。主要就是闭包+js没有块级作用域。每次迭代，就会形成一个闭包，<code>onclick</code>函数会有一个对 i 值的引用，但是，由于没有块作用域，所以这个i是全局作用域中的，也就是这几个函数所引用的i是在同一个作用域中，当然也就只有一个值</p>
<p>那么怎么解决呢？  有两种方法</p>
<p>第一种：使用ES的<code>let</code>语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for(let i = 0; i &lt; count.length; i++) &#123;</div><div class="line">	count[i].onclick = function () &#123;</div><div class="line">		console.log(i);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为<code>let</code>会产生一个块级作用域，每次迭代都会产生一个块级作用域，里面有一个i，每个块级作用域互不影响。这样每次调用点击函数，就会访问对应作用域中的i，就好了</p>
<p>当然如果不想用ES6，我们还有第二种方法<br>第二种：使用立即执行函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">for(var i = 0; i &lt; count.length; i++) &#123;</div><div class="line"></div><div class="line">	(function (i) &#123;</div><div class="line">		count[i].onclick = function()&#123;</div><div class="line">			console.log(i);</div><div class="line">		&#125;</div><div class="line">	&#125;)(i)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>既然原因是没有块级作用域，那我们就手动模拟。每次迭代都会有一个立即执行函数，立即执行函数会创建一个函数作用域，我们把i作为参数传递进去，这样每个作用域也会保存一个i值</p>
<p>点击事件的最后<br>验证玩家身份和储存死亡玩家</p>
<p>杀手不能杀死杀死，不能杀死（投票给）已经死亡的玩家，这就需要我们在点击事件添加验证</p>
<p>我们在点击时，可以通过节点来获取到玩家身份<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var deadNum = parseInt(this.lastChild.firstChild.nodeValue);</div><div class="line">if(deadArr.indexOf(deadNum) &gt;= 0) &#123;</div><div class="line">    alert(&quot;该玩家已死&quot;)</div><div class="line">&#125; else if(this.firstChild.firstChild.nodeValue === &quot;杀手&quot;) &#123;</div><div class="line">    alert(&quot;杀手不能杀死杀手！&quot;)</div><div class="line">&#125; else &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>记录死亡玩家：</p>
<p>点击确定按钮之后，该玩家被杀死，记录被杀的玩家编号，并push进死亡玩家数组。<br>同时检查死亡玩家的身份，将相应（杀手或水民）的人数 - 1 。同时判断是否满足胜利条件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">btn.addEventListener(&quot;click&quot;,function () &#123;</div><div class="line">        if(JSON.parse(localStorage.deadPlayerNum) === 0) &#123;</div><div class="line">            alert(&quot;请选择一名玩家&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">            //点击按钮将死亡玩家存入数组</div><div class="line">            deadArr.push(JSON.parse(localStorage.deadPlayerNum));</div><div class="line">            localStorage.deadPlayerArr = JSON.stringify(deadArr);</div><div class="line">          </div><div class="line">            //输赢判断</div><div class="line"></div><div class="line">            switch (newPlayer[parseInt(localStorage.deadPlayerNum) - 1]) &#123;</div><div class="line">                case &quot;杀手&quot;:</div><div class="line">                    aliveKillers = parseInt(localStorage.aliveKillers);</div><div class="line">                    aliveKillers--;</div><div class="line">                    localStorage.aliveKillers = aliveKillers;</div><div class="line">                    break;</div><div class="line">                case &quot;水民&quot;:</div><div class="line">                    aliveWaters = parseInt(localStorage.aliveWaters);</div><div class="line">                    aliveWaters--;</div><div class="line">                    localStorage.aliveWaters = aliveWaters;</div><div class="line">                    break;</div><div class="line">            &#125;</div><div class="line">            if(aliveWaters === 0 || aliveKillers === 0) &#123;</div><div class="line">                //修复计时BUG</div><div class="line">                var lastTime = new Date() - new Date(localStorage.time);</div><div class="line">                localStorage.lastTime = lastTime;</div><div class="line">                btn.parentNode.setAttribute(&quot;href&quot;, &quot;task4-6.html&quot;);</div><div class="line">            &#125; else &#123;</div><div class="line">                btn.parentNode.setAttribute(&quot;href&quot;, &quot;task4-4.html&quot;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>大致就是这么多，没有从头开始讲所以可能不太好懂，但是一个完整的游戏也不可能把代码全部拿出来，感兴趣的可以看我的github或者与我讨论。</p>
<p>大概就是这么多，如有纰漏，请指正</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://sunxiaoyu233.cn/jstask/task2-1.html&quot;&gt;试玩地址，请使用手机打开&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;代码放在了&lt;a href=&quot;https://github.com/vshaonian/killgame&quot;&gt;github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>通过案例学习正则表达式</title>
    <link href="http://yoursite.com/2016/12/19/%E9%80%9A%E8%BF%87%E6%A1%88%E4%BE%8B%E5%AD%A6%E4%B9%A0%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/12/19/通过案例学习正则表达式/</id>
    <published>2016-12-19T15:44:36.000Z</published>
    <updated>2016-12-19T15:46:05.231Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道js是支持正则表达式的，用正则表达式来验证文本非常方便，但是初学者却非常难懂，最近碰到几个要用正则的地方，实在是逃不过了就去学了学，发现边写边学其实也并不是太难。下面通过一个案例来学习</p>
<p>ps:安利两个网站<a href="https://regexper.com/" target="_blank" rel="external">正则可视化</a>   <a href="http://www.regexr.com/" target="_blank" rel="external">正则检测</a> 下面讲用法<br><a id="more"></a><br><strong>先看需求：匹配美国电话号码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//正确格式</div><div class="line">555-555-5555</div><div class="line">(555)555-5555</div><div class="line">(555) 555-5555</div><div class="line">555 555 5555</div><div class="line">5555555555</div><div class="line">1 555 555 5555</div></pre></td></tr></table></figure></p>
<p>首先会想到匹配数字，发现正则<strong>数字可以用<code>\d</code>表示</strong>，那么<code>\d\d\d-\d\d\d-\d\d\d\d</code>是不是可以匹配第一种类型呢，来用<a href="http://www.regexr.com/" target="_blank" rel="external">这个网站</a>检测一下，可以看到第一个确实被匹配到了，后面<strong><code>/g</code>是全文匹配</strong><br><img src="http://upload-images.jianshu.io/upload_images/3259626-aedccaa82f493368.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>但是缺点显而易见，重复的怎么简写呢？<strong>原来<code>{n}</code>可以表示重复次数</strong>，那么改一下<br><img src="http://upload-images.jianshu.io/upload_images/3259626-2845940e98946d19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>Bingo!,那么接下来注意到第一个，第四个是不是比较相同呢？空格或者横线，那么怎么表示或者关系呢？来看看这个,框起来的是更改的地方</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3259626-63117c653ee256f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>没错<code>[]</code>表示或者的关系</strong>，<strong><code>\s</code>表示空格</strong>。来用<a href="https://regexper.com/" target="_blank" rel="external">可视化</a>看一下<br><img src="http://upload-images.jianshu.io/upload_images/3259626-ee541d7e5c1635eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>意思就是3个数字，接着匹配空格或则横线，再3个数字，再空格或则横线，最后4个数字，这样应该很好理解了</p>
<p>可能会注意到<code>222 555 555 5555</code>这样不符合预期的也匹配到了，原来我们是想从头开始验证，那么可以这样做</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3259626-cad44a4cc5daf8c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>用<code>^</code>表示从头开始匹配</strong>，注意到后面加了<code>/gm</code>,因为加了从头匹配的话，回车换行下一行并不会被认为新的开始，<strong>所以<code>/m</code>表示多行匹配</strong><br>然后看<code>5555555555</code>空格和横线也可以不要，那么意思就是空格或横线可以出现或者不出现，那么可以这样改一下<br><img src="http://upload-images.jianshu.io/upload_images/3259626-f5bbb90b31c4bf82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>注意我<strong>加了一个<code>?</code>，它表示最多出现一次（可以是0次）</strong>这样就可以匹配全是数字这样的情况了，举一反三，那么开始的区号<code>1 555 555 5555</code>中的1和空格是不是也可以这样表示呢？<br><img src="http://upload-images.jianshu.io/upload_images/3259626-ea3c20edd00a77d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>注意我<strong>用<code>()</code>括起来了，它表示一组</strong><br>接下来处理括号，既然也是可有可无，也用<code>?</code>表示算了</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3259626-c4b8ca6425fb6cb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>注意框起来的地方我写的是<code>\(</code>和<code>\)</code>这是因为<strong>要对特殊字符进行转义</strong>，学过js一定对转义不陌生，这里就不细讲了<br>到这里就完了吗？不不不，还是太年轻，来看看这种情况</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3259626-32e863d833e2956a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>我们写的是括号两边都是最多出现一次，并没有要求同时出现或者同时不出现，这就面临着只出现一半也会通过匹配的情况。。再改一下</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3259626-381f650af5dea50b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>这好像改的有点多。。</p>
<p>分步讲，先看前面由<code>(1\s)?</code>改成了<code>1?\s?</code>因为没改之前(1\s)是一组至多出现一次，所以1单独出现的时候也会出现匹配失败，所以还是分开写了</p>
<p>再看第二个这一坨，放到可视化里面看</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3259626-a79bb5b341e84c56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>两组之间的或者关系可以用<code>()|()</code>表示</strong></p>
<p>最后一步，我<strong>加了<code>$</code>来表示结尾，停止匹配</strong>，不然的话<code>555-555-5555555</code>也是会被匹配成功的</p>
<p>大致就是这么多了，最后来完整看一遍代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^1?\s?((\(\d&#123;3&#125;\))|(\d&#123;3&#125;))[\s-]?\d&#123;3&#125;[\s-]?\d&#123;4&#125;$/gm</div></pre></td></tr></table></figure></p>
<p>放到可视化里面</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3259626-2e48253a56c9868a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>常用的正则方法还有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[a-z]    //匹配a到z任意字符</div><div class="line">.    //除回车换行外任意字符</div><div class="line">+//最少出现一次</div><div class="line">\d//数字</div><div class="line">\D//非数字</div><div class="line">\s//空格</div><div class="line">\S//非空格</div><div class="line">\w//单词字符</div><div class="line">\W//非单词字符</div><div class="line">&#123;n&#125;//出现n次</div><div class="line">&#123;n,m&#125;//出现n到m次</div><div class="line">&#123;n,&#125;//至少出现n次</div><div class="line">\b//单词边界</div><div class="line">\B//非单词边界</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道js是支持正则表达式的，用正则表达式来验证文本非常方便，但是初学者却非常难懂，最近碰到几个要用正则的地方，实在是逃不过了就去学了学，发现边写边学其实也并不是太难。下面通过一个案例来学习&lt;/p&gt;
&lt;p&gt;ps:安利两个网站&lt;a href=&quot;https://regexper.com/&quot;&gt;正则可视化&lt;/a&gt;   &lt;a href=&quot;http://www.regexr.com/&quot;&gt;正则检测&lt;/a&gt; 下面讲用法&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>写一个番茄钟（遇到的坑）</title>
    <link href="http://yoursite.com/2016/12/12/%E5%86%99%E4%B8%80%E4%B8%AA%E7%95%AA%E8%8C%84%E9%92%9F%EF%BC%88%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%EF%BC%89/"/>
    <id>http://yoursite.com/2016/12/12/写一个番茄钟（遇到的坑）/</id>
    <published>2016-12-11T16:00:31.000Z</published>
    <updated>2016-12-11T16:15:27.059Z</updated>
    
    <content type="html"><![CDATA[<p><strong>大致功能：</strong><br>设置好学习时间和休息时间，点击开始倒计时。</p>
<p>同时背景颜色区域逐渐变高直至倒计时结束时充满整个区域。</p>
<p>然后进入休息时间，开始倒计时。</p>
<a id="more"></a>
<p>注意在倒计时的时候改变时间按钮是不可用的，点击倒计时暂停后可以更改时间。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3259626-dbc2d7760ac74666.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大概长这样"></p>
<p><a href="http://sunxiaoyu233.cn/FCC/timer.html" target="_blank" rel="external">请戳这里试用</a></p>
<p><strong>大致思路</strong></p>
<p>很好想，就是个倒计时嘛。再加上背景高度变化，然而实际写起来有很多坑</p>
<p><strong>遇到的坑</strong></p>
<p> 倒计时：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function showTime() &#123;</div><div class="line">  secs -= 1;  //时间递减（已转换为秒钟）</div><div class="line">  var h = Math.floor(secs / 3600);  //小时</div><div class="line">  var m = Math.floor(secs % 3600 / 60);  //分钟</div><div class="line">  var s = Math.floor(secs % 3600 % 60);  //秒钟</div><div class="line">  return (</div><div class="line">	(h &gt; 0 ? h + &quot;:&quot; + (m &lt; 10 ? &quot;0&quot; : &quot;&quot;) : &quot;&quot;) + m + &quot;:&quot; + (s &lt; 10 ? &quot;0&quot; : &quot;&quot;) + s</div><div class="line">  );</div><div class="line">  var setTime = setTimeout(showTime, 1000);</div><div class="line">	if (secs &lt; 0) &#123;</div><div class="line">		clearInterval(setTime); //倒计时完毕清除计数器</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>把得到的时间转换成毫秒，再去操作。</p>
<p>大概就是这样写，其实不难想，关于倒计时更多的东西建议去看<a href="https://github.com/gomeplusFED/blog/blob/master/2016-04/do-you-really-understand-how-to-write-a-countdown-by-javascript.md" target="_blank" rel="external">这篇文章</a></p>
<p>写一个学习时间的倒计时，然后倒计时为0时，清除倒计时，并运行休息倒计时。</p>
<p><strong>背景高度的变化</strong></p>
<p>css里使用绝对定位，并且设置<code>bottom</code>为<code>0</code>，再根据时间动态改变高度就可以达到效果了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var fillLength = 1 - (secs / (sltime.innerHTML * 60)); //获取剩余时间与总时间的比值</div><div class="line">fill.style.height = fillLength * 300 + &quot;px&quot;; //根据比值设置高度</div></pre></td></tr></table></figure>
<p><strong>改变时间按钮的控制</strong></p>
<p>当倒计时运行的时候，按钮是不可点击的，这里需要记录按钮是否被点击，我的做法是建一个全局变量，并根据按钮状态设置<code>true or false</code>，点击一次按钮改变一次值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var stopTime = false //初始化全局变量</div><div class="line">clock.onclick = function ifStop() &#123;</div><div class="line">	if (stopTime) &#123;</div><div class="line">		stopTime = false; //点击改变按钮状态</div><div class="line">	&#125; else &#123;</div><div class="line">		stopTime = true;</div><div class="line">		if (timeName.innerHTML == &quot;休息一下吧&quot;) &#123;  </div><div class="line">			firstToHms();//运行倒计时</div><div class="line">		&#125; else &#123;</div><div class="line">			secondsToHms();//运行倒计时</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后呢我就给改变时间函数加判断条件，只有满足条件才能继续执行，结果第一次满足条件之后后面一直就可以运行了。。我的理解是函数被调用之后，运行完并没有销毁，下次再触发还会继续运行。那判断条件不是没用了吗。于是我又写了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setInterval(changeTime,1000);</div></pre></td></tr></table></figure>
<p>每隔一秒钟去判断一次是否满足条件。。。手动监听按钮的状态，也是没谁了</p>
<p>大致就是这么多，代码放在<a href="https://github.com/vshaonian/fcc/tree/master/pomodoro" target="_blank" rel="external">Github</a>了，写的非常乱。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;大致功能：&lt;/strong&gt;&lt;br&gt;设置好学习时间和休息时间，点击开始倒计时。&lt;/p&gt;
&lt;p&gt;同时背景颜色区域逐渐变高直至倒计时结束时充满整个区域。&lt;/p&gt;
&lt;p&gt;然后进入休息时间，开始倒计时。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Demo" scheme="http://yoursite.com/tags/Demo/"/>
    
      <category term="FCC" scheme="http://yoursite.com/tags/FCC/"/>
    
  </entry>
  
  <entry>
    <title>引用类型之Function类型</title>
    <link href="http://yoursite.com/2016/12/04/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E4%B9%8BFunction%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2016/12/04/引用类型之Function类型/</id>
    <published>2016-12-04T07:44:27.000Z</published>
    <updated>2016-12-19T15:50:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于面向对象编程的语言来说，对象是很重要的一个概念，而对于函数来说，每个函数实际上都是对象，每个函数都是Function类型的实例，而且与其他引用类型一样具有属性和方法。<br><a id="more"></a><br><strong>函数声明与函数表达式</strong></p>
<p>通常有三种声明函数的方法</p>
<ol>
<li>使用函数声明语法<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  function sum(num1, num2) &#123;</div><div class="line">  return num1 + num2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这也是最常用的方法</p>
<ol>
<li>使用函数表达式定义函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  var sum = function (num1, num2) &#123;</div><div class="line">  return num1 + num2;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>可能会注意到<code>function</code>关键字后面没有函数名，这是因为使用函数表达式定义函数时，通过变量<code>sum</code>就可以引用函数</p>
<ol>
<li>使用Function构造函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var sum = new Function(&quot;num1&quot;, &quot;num2&quot;, &quot;return num1 + num2&quot;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>但是非常不推荐这种写法，因为这种语法会导致解析两次代码（第一次解析ECMAScript代码，第二次解析传入构造函数的参数）从而影响性能</p>
<p><strong>关于变量提升</strong></p>
<p>对于1，2两种声明函数的方法有什么不同呢？看下面这个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 使用函数声明创建函数</div><div class="line">console.log(sum(10,10));  //会打印出20</div><div class="line">function sum(num1, num2) &#123;</div><div class="line">  return num1 + num2;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 使用函数表达式创建函数</div><div class="line">console.log(add(10,10)); //会报错</div><div class="line">var add = function(num1, num2) &#123;</div><div class="line">  return num1 + num2;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>实际上，解析器在执行环境中加载数据时，解析器会率先读取函数声明，并使其在执行任何代码之前可用，而至于函数表达式，则必须等到解析器执行到它所在的代码行才会真正被解释执行。</p>
<p><strong>函数内部属性</strong></p>
<p>在函数内部，有两个特殊的对象：<code>arguments</code>和<code>this</code></p>
<p><code>arguments</code>是一个类数组对象，包含着传入函数的所有参数，之前在基础算法的时候已经讲过。但是<code>arguments</code>还有一个名叫<code>callee</code>属性，该属性是一个指针，指向拥有<code>arguments</code>对象的函数。具体用法之前写过了，<a href="http://www.jianshu.com/p/74374e8bb6b9" target="_blank" rel="external">看这里</a></p>
<p>另一个比较特殊的对象就是<code>this</code>了,关于<code>this</code>知乎上<a href="https://www.zhihu.com/people/zhihusucks/answers" target="_blank" rel="external">@方方老师</a>的<a href="https://zhuanlan.zhihu.com/p/23804247" target="_blank" rel="external">这篇文章</a>讲的特别好</p>
<p><strong>函数的属性和方法</strong></p>
<p>因为在ECMAScript中函数是对象，因此函数也有属性和方法。</p>
<p>每个函数包含两个属性：<code>length</code>和<code>prototype</code></p>
<p><code>length</code>表示函数接受的参数的个数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function sayName(name) &#123;</div><div class="line">  console.log(name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function sum(sum1, sum2) &#123;</div><div class="line">  return num1 + num2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function sayHi() &#123;</div><div class="line">  console.log(&quot;Hi!&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(sayName.length);  //1</div><div class="line">console.log(sum.length);      //2</div><div class="line">console.log(sayHi.length);    //0</div></pre></td></tr></table></figure></p>
<p>另一个属性<code>prototype</code>是保存引用类型所有实例方法的真正所在，比如<code>toString()</code>和<code>valueOf()</code>等方法都保存在<code>prototype</code>名下，<code>prototype</code>在实现继承时非常重要，下一篇我们再讲。</p>
<p>每个函数都包含两个非继承来的方法：<code>apply()</code>和<code>call()</code></p>
<p><code>apply()</code>和<code>call()</code>都是在特定的作用域中调用函数，等于设置函数体内<code>this</code>的值，他们的区别在于：<br><code>apply()</code>接受两个参数：一个是在其中运行函数的作用域，另一个是参数数组，既可以是<code>Array</code>实例，也可以是<code>arguements</code>对象。<br><code>call()</code>第一个参数和<code>apply()</code>一样，但是传递参数的时候，必须逐个例举出来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function sum(num1, num2) &#123;</div><div class="line">  return num1 + num2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function callSum1(num1, num2) &#123;</div><div class="line">  return sum.apply(this, arguments);   //传入arguments字符串</div><div class="line">&#125;</div><div class="line"></div><div class="line">function callSum2(num1, num2) &#123;</div><div class="line">  return sum.apply(this, [num1,num2]);  //传入数组</div><div class="line">&#125;</div><div class="line"></div><div class="line">function callSum3(num1, num2) &#123;</div><div class="line">  return sum.call(this, num1, num2);   //使用call必须把参数列举出来</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(callSum1(10,10));   //20</div><div class="line">console.log(callSum2(10,10));   //20</div><div class="line">console.log(callSum3(10,10));   //20</div></pre></td></tr></table></figure>
<p>既然<code>apply()</code>和<code>call()</code>的参数有作用域，那么是用来干什么的呢？看下面的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">window.color = &quot;red&quot;;</div><div class="line">var 0 = &#123; color: &quot;blue&quot; &#125;;</div><div class="line"></div><div class="line">function sayColor() &#123;</div><div class="line">  console.log(this.color);</div><div class="line">&#125;</div><div class="line"></div><div class="line">sayColor();                //red</div><div class="line">sayColor.call(this)        //red</div><div class="line">sayColor.call(window)      //red</div><div class="line">sayColor.call(o)           //blue</div></pre></td></tr></table></figure>
<p>是不是<code>this</code>的值又懵了？如果懵了，就翻上去看方方老师那篇文章。<br>没错，<code>apply()</code>和<code>call()</code>的作用就是扩充函数的作用域</p>
<p>大概就是这么多了，书上这一章的内容我反复看了好几遍才理解，所以学习哪有什么捷径，无他，唯手熟尔<br>那么，聪明的你，看完之后懂了没有？<br>下一篇准备讲原型</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于面向对象编程的语言来说，对象是很重要的一个概念，而对于函数来说，每个函数实际上都是对象，每个函数都是Function类型的实例，而且与其他引用类型一样具有属性和方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>基础javascript算法</title>
    <link href="http://yoursite.com/2016/11/30/%E5%9F%BA%E7%A1%80javascript%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2016/11/30/基础javascript算法/</id>
    <published>2016-11-30T14:55:05.000Z</published>
    <updated>2016-12-09T06:16:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>终于把FCC的基础javascript算法做完了，来总结一下。</p>
<a id="more"></a>
<p><strong>翻转字符串</strong></p>
<blockquote>
<p>先把字符串转化成数组，再借助数组的reverse方法翻转数组顺序，最后把数组转化成字符串。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function reverseString(str) &#123;</div><div class="line">  var arr = str.split(&quot;&quot;);</div><div class="line">  var arrs = arr.reverse(); </div><div class="line">  var rts = arr.join(&quot;&quot;);</div><div class="line">  return rts;</div><div class="line">&#125;</div><div class="line"></div><div class="line">reverseString(&quot;hello&quot;);</div></pre></td></tr></table></figure>
<p>主要用到了</p>
<ol>
<li><code>str.split()</code>分割字符串并生成数组。</li>
<li><code>arr.reverse()</code>反转数组，把第一个转到最后一个，最后一个转到第一个。</li>
<li><code>arr.join()</code>在数组中每两个元素中加入一个字符串组成新的字符串<code>arr.join(&quot;&quot;)</code>就是什么都不加入。</li>
</ol>
<p><strong>计算一个整数的阶乘</strong></p>
<p><a href="http://www.jianshu.com/p/74374e8bb6b9" target="_blank" rel="external">这个之前写过了，在这里</a></p>
<p><strong>检测给定的字符是否是回文</strong></p>
<p><a href="http://www.jianshu.com/p/2f0fb49adcf0" target="_blank" rel="external">这个之前也写过了，在这里</a></p>
<p><strong>找到提供的句子中最长的单词，并计算它的长度</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function change(a,b) &#123;</div><div class="line">  if(a.length &gt; b.length) return -1;</div><div class="line">  return 1;</div><div class="line">&#125;</div><div class="line">function findLongestWord(str) &#123;</div><div class="line">  var arr = str.split(&quot; &quot;);</div><div class="line">  var newArr = arr.sort(change);</div><div class="line">  //return newArr.length;</div><div class="line">  return newArr[0].length;</div><div class="line">&#125;</div><div class="line"></div><div class="line">findLongestWord(&quot;The quick brown fox jumped over the lazy dog&quot;);</div></pre></td></tr></table></figure>
<p>主要用到了sort排序，<a href="http://www.jianshu.com/p/579379146bfa" target="_blank" rel="external">详细在这里</a></p>
<p><strong>确保字符串的每个单词首字母都大写，其余部分小写。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function titleCase(str) &#123;</div><div class="line">  var newStr = str.toLowerCase();</div><div class="line">  var arr = newStr.split(&quot; &quot;);</div><div class="line">  for (var i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">    var char = arr[i].charAt(0);</div><div class="line">    arr[i] = arr[i].replace(char,function rep(char) &#123;</div><div class="line">      return char.toUpperCase();</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  var xstr = arr.join(&quot; &quot;);</div><div class="line">    return xstr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">titleCase(&quot;sHoRt AnD sToUt&quot;);</div></pre></td></tr></table></figure>
<p>用到了<code>str.toLowerCase()</code>，<code>str.replace()</code>和<code>str.toUpperCase()</code></p>
<p>思路大概是：字符串换成小写，转换成数组。遍历数组找到每个字符串的首字母（用<code>str.charAt()</code>）。然后用<code>str.replace()</code>把首字母替换为大写。在把数组转换为字符串输出。</p>
<p><code>str.replace()</code>方法：<code>stringObject.replace(regexp/substr,replacement)</code>;regexp/substr为需要替换的对象，replacement为替换后的对象，可以为一个函数，比如文中用到的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr[i] = arr[i].replace(char,function rep(char) &#123;</div><div class="line">     return char.toUpperCase();</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<p><strong>返回数组中最大的数</strong></p>
<blockquote>
<p>右边大数组中包含了4个小数组，分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新数组。<br>largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]])应该返回[5,27,39,1001]</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function change(a,b)&#123;</div><div class="line">  if (a&gt;b) return -1;</div><div class="line">  return 1;</div><div class="line">&#125;</div><div class="line">function largestOfFour(arr) &#123;</div><div class="line">  // You can do this!</div><div class="line">  var maxx = [];</div><div class="line">  var maxNum = [];</div><div class="line">  for(var i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">    maxx[i] =  arr[i].sort(change);</div><div class="line">    maxNum[i] = maxx[i][0];</div><div class="line">  &#125;</div><div class="line">  return maxNum;</div><div class="line">&#125;</div><div class="line"></div><div class="line">largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);</div></pre></td></tr></table></figure>
<p>依然用到sort排序。</p>
<p>思路：遍历数组，sort对数组排序，并传到新数组中对应的位置<code>maxx[i] =  arr[i].sort(change);</code>然后找到各个数组中最大的数传到另一个数组中<code>maxNum[i] = maxx[i][0];</code></p>
<p><strong>检查一个字符串(str)是否以指定的字符串(target)结尾</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function confirmEnding(str, target) &#123;</div><div class="line">  var targetL = target.length;</div><div class="line">  var newStr = str.substring(str.length-targetL,str.length); </div><div class="line">  if (newStr == target) return true;</div><div class="line">  return false;</div><div class="line">&#125;</div><div class="line"></div><div class="line">confirmEnding(&quot;He has to give me a new&quot;, &quot;name&quot;);</div></pre></td></tr></table></figure>
<p>思路：截取字符串最后几位，检查是否等于给定的target</p>
<p><strong>重要的事情说3遍！</strong></p>
<blockquote>
<p>重复一个指定的字符串 num次，如果num是一个负数则返回一个空字符串。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function repeat(str, num) &#123;</div><div class="line">  // repeat after me</div><div class="line">  var newStr = str.split(&quot; &quot;);</div><div class="line">  if (num &lt; 0) return &quot;&quot;;</div><div class="line">  else &#123;</div><div class="line">    for (var i = 0; i &lt; num; i++) &#123;</div><div class="line">      newStr[i] = str;</div><div class="line">    &#125;</div><div class="line">    return newStr.join(&quot;&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">repeat(&quot;abc&quot;, 3);</div></pre></td></tr></table></figure>
<p>思路：这个其实不难，就是不好想出来，新建一个数组，然后在i&lt;num的时候开始循环，新数组的[i]对应给定的str，这样num是多少，就循环了多少遍，新数组中就有多少个元素。</p>
<p><strong>截断一个字符串！</strong></p>
<blockquote>
<p>如果字符串的长度比指定的参数num长，则把多余的部分用…来表示。</p>
<p>切记，插入到字符串尾部的三个点号也会计入字符串的长度。</p>
<p>但是，如果指定的参数num小于或等于3，则添加的三个点号不会计入字符串的长度。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function truncate(str, num) &#123;</div><div class="line">  // Clear out that junk in your trunk</div><div class="line">  var strSub;</div><div class="line">  if (str.length &gt; num) &#123;</div><div class="line">    if(num &gt; 3) &#123;</div><div class="line">    strSub = str.substring(0,num-3);</div><div class="line">      return strSub+&quot;...&quot;;</div><div class="line">    &#125; else &#123;</div><div class="line">    strSub = str.substring(0,num);</div><div class="line">      return strSub+&quot;...&quot;;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return str;</div><div class="line">&#125;</div><div class="line"></div><div class="line">truncate(&quot;A-tisket a-tasket A green and yellow basket&quot;, 11);</div></pre></td></tr></table></figure>
<p>主要用到了<code>str.substring(start,end)</code>,从start处开始截取，到end处截止。<br>难点在与如果指定的参数num小于或等于3，则添加的三个点号不会计入字符串的长度。<br>这个要写if..else来判断</p>
<p><strong>把一个数组按照指定的数组大小分割成若干个数组块。</strong></p>
<blockquote>
<p>chunk([1,2,3,4],2)=[[1,2],[3,4]];<br>chunk([1,2,3,4,5],2)=[[1,2],[3,4],[5]];</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function chunk(arr, size) &#123;</div><div class="line">  // Break it up.</div><div class="line">  var num1 = Math.floor(arr.length / size);</div><div class="line">  var num2 = arr.length % size;</div><div class="line">  var arr2 = [];</div><div class="line">  if (num2 === 0) &#123;</div><div class="line">  for (var i = 0; i &lt; num1; i++) &#123;</div><div class="line">    arr2[i] = arr.slice(i * size,size * (i + 1));</div><div class="line">    //return arr2;</div><div class="line">    &#125; </div><div class="line">  &#125;else  &#123;</div><div class="line">  for (var j = 0; j &lt;= num1; j++) &#123;</div><div class="line">    arr2[j] = arr.slice(j * size,size * (j + 1));</div><div class="line">    //return arr2;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return arr2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">chunk([0, 1, 2, 3, 4, 5], 4);</div></pre></td></tr></table></figure>
<p>用到<code>arr.slice()</code>来切割数组。</p>
<p>思路主要是：</p>
<ol>
<li>先计算出分成几大段并赋值给num1，再计算出分段后剩余的（用求余计算）并赋值给num2；新建一个数组arr2。</li>
<li><p>开始判断，如果余数为0，也就是正好分段完没有剩余字符。此时进行遍历并储存切割后的字符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (var i = 0; i &lt; num1; i++) &#123;</div><div class="line">    arr2[i] = arr.slice(i * size,size * (i + 1));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>如果余数不为0，进行另一种赋值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (var j = 0; j &lt;= num1; j++) &#123;</div><div class="line">    arr2[j] = arr.slice(j * size,size * (j + 1));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>难点还是在于遍历的同时完成切割后字符的储存，之前一直想直接返回数组，结果只会返回第一个值。后来想了一个方法：新建一个数组，遍历的同时进行新数组第i个赋值，完美。</p>
<p><strong>返回一个数组被截断n个元素后还剩余的元素，截断从索引0开始。</strong></p>
<blockquote>
<p>slasher([1, 2, 3], 2)应该返回 [3].<br>slasher([“burgers”, “fries”, “shake”], 1)应该返回 [“fries”, “shake”].</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function slasher(arr, howMany) &#123;</div><div class="line">  // it doesn&apos;t always pay to be first</div><div class="line">  return arr.slice(howMany,arr.length);</div><div class="line">&#125;</div><div class="line"></div><div class="line">slasher([1, 2, 3], 2);</div></pre></td></tr></table></figure>
<p>这个如果想到了还挺简单的,用<code>arr.clice()</code>,输入两个参数，一个起始位置，一个结束位置，就可以输出了。</p>
<p><strong>如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。</strong></p>
<blockquote>
<p>mutation([“Mary”, “Army”])应该返回 true.<br>mutation([“hello”, “neo”])应该返回 false.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function mutation(arr) &#123;</div><div class="line">  var rarr = [];</div><div class="line"> var str1 = arr[0].toLowerCase();</div><div class="line">  var str2 = arr[1].toLowerCase();</div><div class="line">  for (var i = 0; i &lt; str2.length; i++) &#123;</div><div class="line">    rarr[i] = str1.indexOf(str2[i]);</div><div class="line">  &#125;</div><div class="line">  var rstr = rarr.join(&quot;&quot;);</div><div class="line">  if (rstr.indexOf(&quot;-1&quot;) &gt;= 0) &#123;</div><div class="line">    return false;</div><div class="line">  &#125; return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">mutation([&quot;Mary&quot;, &quot;Army&quot;]);</div></pre></td></tr></table></figure>
<p>思路：用<code>str.indexOf()</code>找到第二个字符串各个字符在第一个字符串中的位置（找不到为-1）并储存为一个新数组；然后对储存位置的数组进行判断，找到数组中-1（也就是不被字符串1包含的字符）的位置，如果&gt;=0，就意味着位置数组中确实存在值为-1的元素，也就是第二个字符串中有不被第一个字符串包含的字符。返回false.反之如果值为-1的元素在位置数组中的位置为-1，就证明不存在，也就是字符串2中的字符全能在字符串1中找到，此时返回true。</p>
<p><strong>删除数组中的所有假值。</strong></p>
<blockquote>
<p>在JavaScript中，假值有<code>false</code>、<code>null</code>、<code>0</code>、<code>&quot;&quot;</code>、<code>undefined</code>和<code>NaN</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function bouncer(arr) &#123;</div><div class="line">  // Don&apos;t show a false ID to this bouncer.</div><div class="line">  function change(arr) &#123;</div><div class="line">    return !(arr === null || arr === false || arr === undefined || arr === 0 || arr === &quot;&quot; || arr !== arr);</div><div class="line">  &#125;</div><div class="line">  return arr.filter(change);</div><div class="line">&#125;</div><div class="line"></div><div class="line">bouncer([false, null, 0, NaN, undefined, &quot;&quot;]);</div></pre></td></tr></table></figure>
<p><a href="http://www.jianshu.com/p/e2386d64d07b" target="_blank" rel="external">关于null,undefined,NaN的区别之前写过，点这里跳转</a></p>
<p>主要用到了<code>arr.filter(callback)</code>，用来返回满足callback函数的值。</p>
<p><strong>实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。</strong></p>
<blockquote>
<p>destroyer([1, 2, 3, 1, 2, 3], 2, 3)应该返回 [1, 1].</p>
<p>destroyer([“tree”, “hamburger”, 53], “tree”, 53)应该返回 [“hamburger”].</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function destroyer(arr) &#123;</div><div class="line">  // Remove all the values</div><div class="line">  var arrDel = [];</div><div class="line">  for(var i =1; i&lt;arguments.length; i++) &#123;</div><div class="line">    arrDel.push(arguments[i]);</div><div class="line">  &#125;</div><div class="line">  return arr.filter(function(val) &#123;</div><div class="line">                    return arrDel.indexOf(val)&lt;0;</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">destroyer([1, 2, 3, 1, 2, 3], 2, 3);</div></pre></td></tr></table></figure>
<p>用到<code>arguments.object</code>:arguments 是一个类数组对象。代表传给一个function的参数列表。你可以传递任意数量的参数到该函数，然后该函数会将每个参数作为一个条目来创建一个列表。</p>
<p>比如destroyer(arr)这个函数，只有一个参数，那么如何处理destroyer([1, 2, 3, 1, 2, 3], 2, 3);呢？<br>没错，[1, 2, 3, 1, 2, 3], 2, 3全部都是arguments这个类数组。可以理解为arguments=[[1, 2, 3, 1, 2, 3], 2, 3]</p>
<p>但是arguments对象并不是一个真正的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array" target="_blank" rel="external">Array
</a>。它类似于数组，但没有数组所特有的属性和方法，除了 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/length" target="_blank" rel="external">length</a>。例如，它没有 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop" target="_blank" rel="external">pop</a> 方法。</p>
<p>思路：新建一个储存被删除值的数组arrDel，开始对arguments进行遍历，注意val i = 1;因为不需要对第一个（也就是arr）进行遍历。</p>
<p>然后把arguments各个元素push进arrDel.然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">return arr.filter(function(val) &#123;</div><div class="line">       return arrDel.indexOf(val)&lt;0;&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。</strong></p>
<blockquote>
<p>where([1,2,3,4], 1.5)应该返回 1。因为1.5插入到组[1,2,3,4]后变成[1,1.5,2,3,4]，而1.5对应的索引值就是1。</p>
<p>同理，where([20,3,5], 19) 应该返回 2。因为数组会先排序为 [3,5,20]，19插入到数组[3,5,20]后变成[3,5,19,20]，而19对应的索引值就是2。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function where(arr, num) &#123;</div><div class="line">  // Find my place in this sorted array.</div><div class="line">  var newArr = arr.concat(num);</div><div class="line">  function change(a,b) &#123;</div><div class="line">    if (b - a &gt;0) return -1;</div><div class="line">    return 1;</div><div class="line">  &#125;</div><div class="line">  return newArr.sort(change).indexOf(num);</div><div class="line">&#125;</div><div class="line"></div><div class="line">where([2, 20, 10], 19);</div></pre></td></tr></table></figure>
<p>思路：用arr.concat拼接数组，然后利用sort排序，然后用indexOf返回索引值就可以了。</p>
<p><strong>写一个<a href="http://www.baike.com/wiki/ROT13&amp;prd=so_1_doc" target="_blank" rel="external">ROT13</a>函数，实现输入加密字符串，输出解密字符串。</strong></p>
<blockquote>
<p>下面我们来介绍风靡全球的凯撒密码Caesar cipher<br>，又叫移位密码。</p>
<p>移位密码也就是密码中的字母会按照指定的数量来做移位。</p>
<p>一个常见的案例就是<a href="http://www.baike.com/wiki/ROT13&amp;prd=so_1_doc" target="_blank" rel="external">ROT13</a>密码，字母会移位13个位置。由’A’ ↔ ‘N’, ‘B’ ↔ ‘O’，以此类推。</p>
<p>写一个<a href="http://www.baike.com/wiki/ROT13&amp;prd=so_1_doc" target="_blank" rel="external">ROT13</a>函数，实现输入加密字符串，输出解密字符串。</p>
<p>所有的字母都是大写，不要转化任何非字母形式的字符(例如：空格，标点符号)，遇到这些特殊字符，跳过它们。</p>
<p>rot13(“SERR PBQR PNZC”)应该解码为 “FREE CODE CAMP”</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function rot13(str) &#123;</div><div class="line">  var newArr=[];</div><div class="line">  for(var i=0;i&lt;str.length;i++)&#123;</div><div class="line">    if(str.charCodeAt(i)&lt;65||str.charCodeAt(i)&gt;90)&#123;</div><div class="line">      newArr.push(str.charAt(i));</div><div class="line">     &#125;else if(str.charCodeAt(i)&gt;77)&#123;</div><div class="line">       newArr.push(String.fromCharCode(str.charCodeAt(i)-13));</div><div class="line">    &#125;else&#123;</div><div class="line">      newArr.push(String.fromCharCode(str.charCodeAt(i)+13));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return newArr.join(&quot;&quot;);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"></div><div class="line"></div><div class="line">// Change the inputs below to test</div><div class="line"> rot13(&quot;SERR PBQR PNZC&quot;);</div></pre></td></tr></table></figure>
<p>这个主要考察unicode编码。</p>
<p><code>charCodeAt()</code>方法返回0到65535之间的整数，代表索引处字符的UTF-16编码单元（在Unicode编码单元表示一个单一的UTF-16编码单元的情况下，UTF-16编码单元匹配Unicode编码单元。否则，比如Unicode 编码单元 &gt; 0x10000 的情况下，只能匹配Unicode代理对的第一个编码单元）。如果你希望得到整点编码值，使用codePointAt()</p>
<p>思路： </p>
<ol>
<li>26个字母的unicode码在65(A)与90(Z)之间,第13位M(77); </li>
<li>将str通过.charCodeAt()转为unicode编码并放入新数组; </li>
<li>其中非字母形式的字符直接放入.charAt(); </li>
<li>后13位字母减去13后放入； </li>
<li>前13位字母加上13后放入； </li>
<li>通过.fromCharCode()转化为字母，将数组转化为字符串；</li>
</ol>
<p><strong>基础javascript算法就到这了，很多算法虽然写出来了，但是应该不是最优解，但是现在我还想不出来更好的解法。先这样吧，如有错误，欢迎指正。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于把FCC的基础javascript算法做完了，来总结一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="FCC" scheme="http://yoursite.com/tags/FCC/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>js字符串转数字</title>
    <link href="http://yoursite.com/2016/11/24/js%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2016/11/24/js字符串转数字/</id>
    <published>2016-11-24T15:22:13.000Z</published>
    <updated>2016-11-24T15:24:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天写代码的时候遇到一个问题，获取了一个span元素的值，但是+1的时候却出现了25+1=251的情况。原来是获取的值为字符串，所以对字符串进行了拼接。</p>
<p>我又翻了翻js高程，仔细看了看关于字符串，数字，布尔值的互相转换问题，这里先介绍字符串转数字。<br><a id="more"></a><br>js里有三种方法可以完成字符串转数字，分别是</p>
<ul>
<li><code>Number()</code></li>
<li><code>parseInt()</code></li>
<li><code>parseFloat()</code></li>
</ul>
<p>那么它们有什么区别呢？</p>
<ol>
<li><p><code>Number()</code></p>
<ul>
<li>如果字符串只包含数字，则将其转换为十进制数值，即 <code>&quot;123&quot;</code> 会变成 <code>123</code>  </li>
<li>如果字符串包含十六进制格式，例如 <code>&quot;0xf&quot;</code> ，则将其转换为相同大小的十进制整数值</li>
<li>如果字符串为空，转换为 <code>0</code></li>
<li>如果是上述格式之外的字符，转换为 <code>NaN</code><br>例如<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var num1 = Number(&quot;Hello world!&quot;);      //NaN</div><div class="line">var num2 = Number(&quot;&quot;);                  //0</div><div class="line">var num3 = Number(&quot;000011&quot;);            //NaN</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>parseInt()</code><br>由于<code>Number()</code>处理字符串比较复杂且不够合理，所以处理整数常用 <code>parseInt()</code><br><code>parseInt()</code> 转换字符的时候，会识别字符是否符合数值模式，它会忽略字符串前面的空格，从第一个非空格字符开始解析，如果是非数字符号或正负号，则返回 <code>NaN</code> 。如果第一个非空字符是数字符号或正负号，那么会继续解析，直到解析完或遇到非数字符号，比如 <code>1234blue</code> 会被转换成 <code>1234</code>， 但是需要注意的是，小数点并不算是数字符号，所以 <code>22.5</code> 会被解析为 <code>22</code>。同时也能解析八进制或十六进制的数。<br>例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var num1 = parseInt(&quot;1234blue&quot;);      //1234</div><div class="line">var num2 = parseInt(&quot;&quot;);              //NaN</div><div class="line">var num3 = parseInt(&quot;22.5&quot;);          //22</div><div class="line">var num4 = parseInt(&quot;070&quot;);           //56(八进制数)</div><div class="line">var num5 = parseInt(&quot;0xf&quot;);           //15(十六进制数)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>另外一点，由于 <code>parseInt()</code> 在解析八进制数字的时候，ECMAScript3和5存在分歧，所以 <code>parseInt()</code> 可以制定两个参数，即转换的进制，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var num1 = parseInt(&quot;AF&quot;, 16);      //175</div><div class="line">var num2 = parseInt(&quot;AF&quot;);          //NaN</div><div class="line">var num3 = parseInt(&quot;10&quot;, 2);       //2(按二进制解析)</div><div class="line">var num4 = parseInt(&quot;10&quot;, 8);       //8(按八进制解析)</div><div class="line">var num5 = parseInt(&quot;10&quot;, 10);      //10(按十进制解析)</div><div class="line">var num6 = parseInt(&quot;10&quot;, 16);      //16(按十六进制解析)</div></pre></td></tr></table></figure></p>
<ol>
<li><code>parseFloat()</code><br>与 <code>parseInt()</code> 类似，也是从第一个字符开始解析，但是小数点是有效的，因为 <code>parseFloat()</code> 解析的不是数字符号，而是浮点数字字符，但第二个小数点就无效了。比如 <code>&quot;22.34.5&quot;</code> 会背转换为 <code>22.34</code><br>需要注意的是 <code>parseFloat()</code> 只能解析十进制的数字。<br>例如<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var num1 = parseFloat(&quot;1234blue&quot;);      //1234</div><div class="line">var num2 = parseFloat(&quot;22.5&quot;);          //22.5</div><div class="line">var num3 = parseFloat(&quot;22.34.5&quot;);       //22.34</div><div class="line">var num4 = parseFloat(&quot;0xA&quot;);           //0</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天写代码的时候遇到一个问题，获取了一个span元素的值，但是+1的时候却出现了25+1=251的情况。原来是获取的值为字符串，所以对字符串进行了拼接。&lt;/p&gt;
&lt;p&gt;我又翻了翻js高程，仔细看了看关于字符串，数字，布尔值的互相转换问题，这里先介绍字符串转数字。&lt;br&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>实现一个弹幕墙APP</title>
    <link href="http://yoursite.com/2016/11/23/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BC%B9%E5%B9%95%E5%A2%99APP/"/>
    <id>http://yoursite.com/2016/11/23/实现一个弹幕墙APP/</id>
    <published>2016-11-23T14:46:33.000Z</published>
    <updated>2016-12-09T06:16:19.536Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://sunxiaoyu233.cn/danmu.html" target="_blank" rel="external">弹幕墙APP点这里</a></p>
<p><strong>功能:</strong> 实现发射弹幕、清除弹幕、显示弹幕功能。<br><strong>扩展:</strong> 用<a href="https://www.wilddog.com/" target="_blank" rel="external">野狗实时后端云</a>来存储弹幕数据。</p>
<p><strong>按照</strong> : 结构–&gt;样式–&gt;功能–&gt;存储  进行开发<br><a id="more"></a><br>结构和样式很简单：<br><img src="http://upload-images.jianshu.io/upload_images/3259626-879590d875c9847f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>这里注意由于要实现弹幕滚动要用到绝对定位，然后动态改变弹幕 <code>left</code> 的值。这里用到绝对定位元素的居中。</p>
<p>由于绝对定位脱离了文档流，所以用 <code>text-align:center</code> 和 <code>margin: 0 auto</code>实现不了水平居中，这里要用到一种比较暴力的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">position: absolute;</div><div class="line">top: 0;</div><div class="line">bottom: 0;</div><div class="line">left: 0;</div><div class="line">right: 0;</div></pre></td></tr></table></figure>
<p>就是使其既向上也向下，既向上又向下。这样它就不知所措，所以就乖乖的呆在中间了233</p>
<p>还有一种方法，用到css3的 <code>transform</code> 方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">position: absolute;</div><div class="line">top: 50%;</div><div class="line">left: 50%;</div><div class="line">transform: translate(-50%, -50%);</div></pre></td></tr></table></figure>
<p>就是先相对于父元素偏移50%，再使自己相对于自己移动50%。不知道为什么这种方法我没实现。</p>
<p>最重要的 <strong>功能</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//创建数据库引用</div><div class="line">var config = &#123;</div><div class="line">    authDomain: &quot;sxydanmu.wilddog.com&quot;,</div><div class="line">    syncURL: &quot;https://sxydanmu.wilddogio.com&quot;</div><div class="line">  &#125;;</div><div class="line">  wilddog.initializeApp(config);</div><div class="line">  var ref = wilddog.sync().ref();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//发射按钮事件</div><div class="line">  $(&quot;#shut&quot;).click(function() &#123;</div><div class="line">    var text = $(&quot;.s_txt&quot;).val();//获取输入框文字</div><div class="line">    ref.child(&apos;message&apos;).push(text);// 将数据写到云端 message 节点下，child 用来定位子节点</div><div class="line">    $(&quot;.s_txt&quot;).val(&apos;&apos;);//清空输入框</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//清空按钮事件</div><div class="line">  $(&quot;#clc&quot;).click(function() &#123;</div><div class="line">    ref.remove();//清空云端数据</div><div class="line">    arr = [];</div><div class="line">    $(&quot;.move&quot;).empty();//清空显示框</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 绑定 &apos;child_added&apos; 事件，当 message 节点下有子节点新增时，就会触发回调，回调的 `snapshot` 对象包含了新增的数据</div><div class="line">  ref.child(&apos;message&apos;).on(&apos;child_added&apos;, function(snapshot) &#123;</div><div class="line">  	var text = snapshot.val();</div><div class="line">    arr.push(text);</div><div class="line">    var textObj = $(&quot;&lt;div&gt;&lt;/div&gt;&quot;);</div><div class="line">    textObj.text(text);</div><div class="line">    $(&quot;.move&quot;).append(textObj);</div><div class="line">    moveObj(textObj);</div><div class="line">    console.log(text);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//清屏后清空云端数据，清空本地弹幕</div><div class="line">  ref.on(&apos;child_removed&apos;, function(snapshot) &#123;</div><div class="line">    arr = [];</div><div class="line">    $(&quot;.show&quot;).empty();</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//弹幕滚动及逐条显示</div><div class="line">var topMin = $(&apos;.message&apos;).offset().top; 	 // 显示框距顶部距离</div><div class="line">  var topMax = topMin + $(&apos;.message&apos;).height(); // 显示框底部距顶部距离</div><div class="line">  var _top = topMin; // 每个滚动消息距顶部距离</div><div class="line">  var moveObj = function(obj) &#123;</div><div class="line">  	var _left = $(&apos;.message&apos;).width() - obj.width();</div><div class="line">  	_top = _top + 50;</div><div class="line">  	if (_top &gt; (topMax - 50)) &#123;</div><div class="line">  		_top = topMin;</div><div class="line">  	&#125;</div><div class="line">  	obj.css(&#123;</div><div class="line">  		left : _left,</div><div class="line">  		top : _top,</div><div class="line">  		color : getRandomColor()  // 获取随机颜色</div><div class="line">  	&#125;);</div><div class="line">  	var time = 20000 + 10000 * Math.random();</div><div class="line">  	// animate() 方法执行 CSS 属性集的自定义动画。逐渐改变的，这样就可以创建动画效果。</div><div class="line">  	obj.animate(&#123;</div><div class="line">  		left : &quot;-&quot; + _left + &quot;px&quot;  // 让消息距左距离逐渐减小，产生右向左滚动动画。</div><div class="line">  	&#125;, time, function() &#123;</div><div class="line">  		obj.remove();</div><div class="line">  	&#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//在屏幕上输出弹幕</div><div class="line">  var getAndRun = function() &#123; //弹幕输出</div><div class="line">	if (arr.length &gt; 0) &#123;</div><div class="line">		var n = Math.floor(Math.random() * arr.length + 1) - 1;</div><div class="line">		var textObj = $(&quot;&lt;div&gt;&quot; + arr[n] + &quot;&lt;/div&gt;&quot;);</div><div class="line">		$(&quot;.move&quot;).append(textObj);</div><div class="line">		moveObj(textObj);</div><div class="line">	&#125;</div><div class="line">	setTimeout(getAndRun, 3000);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//随机颜色函数</div><div class="line">var getRandomColor = function() &#123;//随机颜色函数</div><div class="line">	return &apos;#&apos; + (function(h) &#123;</div><div class="line">		return new Array(7 - h.length).join(&quot;0&quot;) + h</div><div class="line">	&#125;)((Math.random() * 0x1000000 &lt;&lt; 0).toString(16))</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>大致就是这么多了，其实照着文档写倒也没花太多功夫。</p>
<p>写了这个弹幕APP，让我学会了写JQuery，之前一直写原生的JS，果然JQuery方便的多。不过我觉得我还是喜欢写原生的（我是不是有病）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://sunxiaoyu233.cn/danmu.html&quot;&gt;弹幕墙APP点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;功能:&lt;/strong&gt; 实现发射弹幕、清除弹幕、显示弹幕功能。&lt;br&gt;&lt;strong&gt;扩展:&lt;/strong&gt; 用&lt;a href=&quot;https://www.wilddog.com/&quot;&gt;野狗实时后端云&lt;/a&gt;来存储弹幕数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;按照&lt;/strong&gt; : 结构–&amp;gt;样式–&amp;gt;功能–&amp;gt;存储  进行开发&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Demo" scheme="http://yoursite.com/tags/Demo/"/>
    
      <category term="FCC" scheme="http://yoursite.com/tags/FCC/"/>
    
  </entry>
  
  <entry>
    <title>js实现一个简单的计算器</title>
    <link href="http://yoursite.com/2016/11/23/js%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    <id>http://yoursite.com/2016/11/23/js实现一个简单的计算器/</id>
    <published>2016-11-23T11:11:42.000Z</published>
    <updated>2016-12-09T06:16:12.024Z</updated>
    
    <content type="html"><![CDATA[<p> <a href="http://sunxiaoyu233.cn/FCC/calculator.html" target="_blank" rel="external">Demo戳这里</a><br><strong>功能1:</strong> 可以对两个数字进行加、减、乘、除的运算.<br><strong>功能2:</strong> 可以使用清除按钮清空当前的所有输入内容.<br><strong>功能3:</strong> 可以把多个运算连接起来操作, 直到按下等号键, 计算器输出正确的运算结果.<br><a id="more"></a></p>
<p><strong>11月27日更新</strong></p>
<p>使用 <code>switch</code> 语句代替 <code>if</code> 语句，使逻辑更清晰,代码更新部分如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//switch语句</div><div class="line">    switch (values) &#123;</div><div class="line">      case &quot;Ans&quot;:</div><div class="line"></div><div class="line">        break;</div><div class="line">      case &quot;=&quot;:</div><div class="line">          rel = eval(txt.join(&quot;&quot;));</div><div class="line">          prt.value = rel;</div><div class="line">          txt = [];</div><div class="line">          txt.push(rel);</div><div class="line">        break;</div><div class="line">      case &quot;AC&quot;:</div><div class="line">          prt.value = [];</div><div class="line">          txt = [];</div><div class="line">        break;</div><div class="line">      case &quot;CE&quot;:</div><div class="line">          txt.pop();</div><div class="line">          prt.value = txt.join(&quot;&quot;);</div><div class="line">        break;</div><div class="line">      default:</div><div class="line">        txt.push(values);</div><div class="line">        prt.value = txt.join(&quot;&quot;);</div><div class="line">      &#125;;</div></pre></td></tr></table></figure>
<p><strong>原文如下</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/3259626-0607f70596cf923c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>由于我对原生js有一种迷之热爱（微笑.jpg），所以没用JQuery。<br>css很简单，但是没仔细做，自适应也没写。</p>
<p><strong>思路:</strong></p>
<p> 给每个按钮一个Value，然后js获取点击按钮value。新建一个空的数组，每次获取点击的value之后push进去，然后用<code>arr.join(&quot;&quot;)</code>转换为字符串，并赋值给input的value就可以显示了。这里有一点，input设置为<code>readonly</code>。</p>
<p>当<code>value == &quot;=&quot;</code>时，用到<code>eval()</code>函数。</p>
<blockquote>
<p>eval() 将一个JavaScript代码字符串求值成特定的对象。</p>
</blockquote>
<p>这个函数难点在于AC和CE。AC是清除所有输入，很简单，直接另数组=[]。</p>
<p>CE的话可以用<code>arr.pop()</code>,该方法用于删除数组中最后一个元素。</p>
<p><strong>总体js代码</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">var values;</div><div class="line">var txt = [];</div><div class="line">var prt = document.getElementById(&quot;prt&quot;);</div><div class="line">var rel;</div><div class="line">function getValues() &#123;</div><div class="line">  var btns = document.getElementsByTagName(&quot;button&quot;);</div><div class="line">  for (var i = 0; i &lt; btns.length; i++) &#123;</div><div class="line">    btns[i].onclick = function() &#123;</div><div class="line">      values = this.value;</div><div class="line">      if (values !=  &quot;Ans&quot;) &#123;</div><div class="line">        if (values == &quot;=&quot;) &#123;</div><div class="line">          rel = eval(txt.join(&quot;&quot;));</div><div class="line">          console.log(rel);</div><div class="line">          prt.value = rel;</div><div class="line">          txt = [];</div><div class="line">          txt.push(rel);</div><div class="line">        &#125; else if (values == &quot;AC&quot;) &#123;</div><div class="line">          prt.value = [];</div><div class="line">          txt = [];</div><div class="line">        &#125; else if (values == &quot;CE&quot;) &#123;</div><div class="line">          txt.pop();</div><div class="line">          prt.value = txt.join(&quot;&quot;);</div><div class="line">          &#125; else &#123;</div><div class="line">            txt.push(values);</div><div class="line">            prt.value = txt.join(&quot;&quot;);</div><div class="line">          &#125;;</div><div class="line">        &#125;;</div><div class="line">        console.log(txt);</div><div class="line">      &#125;;</div><div class="line">    &#125;;</div><div class="line">  &#125;;</div><div class="line">window.onload = getValues;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;a href=&quot;http://sunxiaoyu233.cn/FCC/calculator.html&quot;&gt;Demo戳这里&lt;/a&gt;&lt;br&gt;&lt;strong&gt;功能1:&lt;/strong&gt; 可以对两个数字进行加、减、乘、除的运算.&lt;br&gt;&lt;strong&gt;功能2:&lt;/strong&gt; 可以使用清除按钮清空当前的所有输入内容.&lt;br&gt;&lt;strong&gt;功能3:&lt;/strong&gt; 可以把多个运算连接起来操作, 直到按下等号键, 计算器输出正确的运算结果.&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Demo" scheme="http://yoursite.com/tags/Demo/"/>
    
      <category term="FCC" scheme="http://yoursite.com/tags/FCC/"/>
    
  </entry>
  
  <entry>
    <title>如何使用gitHub Pages和Hexo搭建个人博客</title>
    <link href="http://yoursite.com/2016/11/23/%E6%96%87%E7%AB%A0%E9%A2%98%E7%9B%AE/"/>
    <id>http://yoursite.com/2016/11/23/文章题目/</id>
    <published>2016-11-23T10:53:06.000Z</published>
    <updated>2016-11-24T07:43:10.363Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;

    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/11/23/hello-world/"/>
    <id>http://yoursite.com/2016/11/23/hello-world/</id>
    <published>2016-11-23T09:35:47.939Z</published>
    <updated>2016-11-24T03:24:34.300Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
